<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-lcurley-warp-latest" category="info">

  <front>
    <title abbrev="WARP">Warp - Segmented Live Media Transport</title>

    <author initials="L." surname="Curley" fullname="Luke Curley">
      <organization>Twitch</organization>
      <address>
        <email>kixelated@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Pugin" fullname="Kirill Pugin">
      <organization>Meta</organization>
      <address>
        <email>ikir@meta.com</email>
      </address>
    </author>
    <author initials="S." surname="Nandakumar" fullname="Suhas Nandakumar">
      <organization>Cisco</organization>
      <address>
        <email>snandaku@cisco.com</email>
      </address>
    </author>

    <date />

    <area>General</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the core behavior for Warp, a segmented live media transport protocol.
Media is split into segments based on the underlying media encoding.
Each segment is transmitted independently over a QUIC stream.
QUIC streams are prioritized, allowing less important segments to be starved or dropped during congestion.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>Warp is a live media transport protocol that utilizes the QUIC network protocol <xref target="QUIC"/>.</t>

<t><xref target="motivation"/> covers the background and rationale behind Warp.
<xref target="segments"/> covers how media is encoded and split into segments.
<xref target="quic"/> covers how QUIC is used to transfer media.
<xref target="messages"/> covers how messages are encoded on the wire.</t>

<section anchor="terms-and-definitions" title="Terms and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Commonly used terms in this document are described below.</t>

<t><list style="hanging">
  <t hangText="Bitstream:">
  A continunous series of bytes.</t>
  <t hangText="Codec:">
  A compression algorithm for audio or video.</t>
  <t hangText="Congestion:">
  Packet loss and queuing caused by degraded or overloaded networks.</t>
  <t hangText="Consumer:">
  A QUIC endpoint receiving media over the network. This could be the media player or middleware.</t>
  <t hangText="Container:">
  A file format containing timestamps and the codec bitstream</t>
  <t hangText="Decoder:">
  A endpoint responsible for a deflating a compressed media stream into raw frames.</t>
  <t hangText="Decode Timestamp (DTS):">
  A timestamp indicating the order that frames/samples should be fed to the decoder.</t>
  <t hangText="Encoder:">
  A component responsible for creating a compressed media stream out of raw frames.</t>
  <t hangText="Frame:">
  An video image or group of audio samples to be rendered at a specific point in time.</t>
  <t hangText="I-frame:">
  A frame that does not depend on the contents of other frames; effectively an image.</t>
  <t hangText="Group of pictures (GoP):">
  A I-frame followed by a sequential series of dependent frames.</t>
  <t hangText="Group of samples:">
  A sequential series of audio samples starting at a given timestamp.</t>
  <t hangText="Player:">
  A component responsible for presenting frames to a viewer based on the presentation timestamp.</t>
  <t hangText="Presentation Timestamp (PTS):">
  A timestamp indicating when a frames/samples should be presented to the viewer.</t>
  <t hangText="Producer:">
  A QUIC endpoint sending media over the network. This could be the media encoder or middleware.</t>
  <t hangText="Rendition:">
  One or more tracks with the same content but different encodings.</t>
  <t hangText="Slice:">
  A section of a video frame. There may be multiple slices per frame.</t>
  <t hangText="Track:">
  An encoded bitstream, representing a single video/audio component that makes up the larger broadcast.</t>
</list></t>

</section>
</section>
<section anchor="motivation" title="Motivation">

<section anchor="latency" title="Latency">
<t>In a perfect world, we could deliver live media at the same rate it is produced.
The end-to-end latency of a broadcast would be fixed and only subject to encoding and transmission delays.
Unfortunately, networks have variable throughput, primarily due to congestion.</t>

<t>Attempting to deliver media larger than this variable network bitrate causes queuing.
This queuing can occur anywhere in the path between the encoder and decoder.
For example: the application, the OS socket, a wifi router, within an ISP, or generally anywhere in transit.</t>

<t>If nothing is done, new frames will be appended to the end of a growing queue and will take longer to arrive than their predecessors, increasing latency.
Our job is to minimize the growth of this queue, and failing that, skip the queue when possible.</t>

<t>Thus speed at which a media protocol can detect and respond to queuing determines the latency.
We can generally classify existing media protocols into two categories based on the underlying network protocol:</t>

<t><list style="symbols">
  <t>TCP-based media protocols (ex. RTMP, HLS, DASH) are popular due to their simplicity.
Media is served/consumed in decode order while any networking is handled by the TCP layer.
However, these protocols primarily see use at higher latency targets due to their relatively slow detection and response to queuing.</t>
  <t>UDP-based media protocols (ex. RTP, WebRTC, SRT) can side-step the issues with TCP and provide lower latency with better queue management.
However the media protocol is now responsible for fragmentation, congestion control, retransmissions, receiver feedback, reassembly, and more.
This added complexity significantly raises the implementation difficulty and hurts interoperability.</t>
</list></t>

<t>A goal of this draft is to get the best of both worlds: a simple protocol that can still rapidly detect and respond to congestion.
This is possible emergence of QUIC, designed to fix the shortcomings of TCP.
This draft relies on QUIC streams to deliver media segments in priority order during congestion.</t>

</section>
<section anchor="universal" title="Universal">
<t>The media protocol ecosystem is fragmented; each protocol has it's own niche.
Specialization is often a good thing, but we believe there's enough overlap to warrant consolidation.</t>

<t>For example, a service might simultaneously ingest via WebRTC, SRT, RTMP, and/or a custom UDP protocol depending on the broadcaster.
The same service might then simultaneously distribute via WebRTC, LL-HLS, HLS, (or the DASH variants) and/or a custom UDP protocol depending on the viewer.</t>

<t>These media protocols are radically different and not interoperable; requiring transcoding or transmuxing.
This cost is further increased by the need to maintain separate stacks with different expertise requirements.</t>

<t>A goal of this draft is to cover a large spectrum of use-cases. Specifically:</t>

<t><list style="symbols">
  <t>Consolidated contribution and distribution.
The primary difference between the two is the ability to fanout.
How does a CDN know how to forward media to N consumers and how does it reduce the encoded bitrate during congestion?
A single protocol can cover both use-cases provided intermediaries are informed on how to forward and drop media.</t>
  <t>A configurable latency versus quality trade-off.
The producer (broadcaster) chooses how to encode and transmit media based on the desired user experience.
Each consumer (viewer) chooses how long to wait for media based on their desired user experience and network.
We want an experience that can vary from real-time and lossy for one viewer, to delayed and loss-less for another viewer, without separate encodings or protocols.</t>
</list></t>

</section>
<section anchor="intermediaries" title="Intermediaries">
<t>The prevailing belief is that UDP-based protocols are more expensive and don't "scale".
While it's true that UDP is more difficult to optimize than TCP, QUIC itself is proof that it is is possible to reach performance parity.
In fact even some TCP-based protocols (ex. RTMP) don't "scale" either and are exclusively used for contribution as a result.</t>

<t>The truth is that the ability to scale a media protocol depends on intermediary support: proxies, caches, CDNs, SFUs, etc.
The success of HTTP-based media protocols is due to the ability to leverage traditional HTTP CDNs.</t>

<t>Meanwhile, it's difficult to build a CDN for media protocols that were not designed with intermediaries in mind.
For example, an intermediary has to parse the underlying codec to determine which RTP packets should be dropped first, and the decision is not deterministic or consistent for each hop.</t>

<t>A goal of this draft is to treat intermediaries as first class citizens.
Any identification, reliability, ordering, prioritization, caching, etc is written to the wire in header designed for intermediaries.
This ensures that intermediaries can easily route/fanout media to the final destination.
This also ensures that congestion response is consistent at every hop based on the preferences of the media producer.</t>

</section>
</section>
<section anchor="segments" title="Segments">
<t>Warp works by splitting media into segments that can be transferred over the network somewhat independently.</t>

<t><list style="symbols">
  <t>The encoder determines how to fragment the encoded bitstream into segments (<xref target="media"/>).</t>
  <t>Segments are assigned an intended delivery order that should be obeyed during congestion (<xref target="delivery-order"/>)</t>
  <t>The decoder receives each segment and skips any segments that do not arrive in time (<xref target="decoder"/>).</t>
</list></t>

<section anchor="media" title="Media">
<t>An encoder produces one or more codec bitstreams for each track.
The bitstreams are fed to the decoder on the other end, after being transported over the network, in the same order its produced.
The problem, as explained in motivation (<xref target="latency"/>), is that networks cannot sustain a continuous rate and thus queuing occurs.
See the appendix for an overview of media encoding (<xref target="appendix.encoding"/>).</t>

<t>Warp works by fragmenting the bitstream into segments that can be transmitted independently.
Depending on how the segments are fragmented, the decoder has the ability to safely drop media during congestion.
See the appendix for fragmentation examples (<xref target="appendix.examples"/>)</t>

<t>A segment:</t>

<t><list style="symbols">
  <t>MUST contain a single track.</t>
  <t>MUST be in decode order. This means an increasing DTS.</t>
  <t>MAY contain any number of frames/samples.</t>
  <t>MAY have gaps between frames/samples.</t>
  <t>MAY overlap with other segments. This means interleaved timestamps.</t>
  <t>MAY reference frames in other segments, but only if listed as a dependency.</t>
</list></t>

<t>Segments are encoded using fragmented MP4 <xref target="ISOBMFF"/>.
This is necessary to store timestamps and various metadata depending on the codec.
A future draft of Warp may specify other container formats.</t>

</section>
<section anchor="delivery-order" title="Delivery Order">
<t>Media is produced with an intended order, both in terms of when media should be presented (PTS) and when media should be decoded (DTS).
As stated in motivation (<xref target="latency"/>), the network is unable to maintain this ordering during congestion without increasing latency.</t>

<t>The encoder determines how to behave during congestion by assigning each segment a numeric delivery order.
The delivery order SHOULD be followed when possible to ensure that the most important media is delivered when throughput is limited.
Note that the contents within each segment are still delivered in order; this delivery order only applies to the ordering between segments.</t>

<t>A sender MUST send each segment over a dedicated QUIC stream.
The QUIC library should support prioritization (<xref target="prioritization"/>) such that streams are transmitted in delivery order.</t>

<t>A receiver MUST NOT assume that segments will be received in delivery order for a number of reasons:</t>

<t><list style="symbols">
  <t>Newly encoded segments MAY have a smaller delivery order than outstanding segments.</t>
  <t>Packet loss or flow control MAY delay the delivery of individual streams.</t>
  <t>The sender might not support QUIC stream prioritization.</t>
</list></t>

<t>A proxy MAY change the delivery order, in which case it SHOULD update the value on the wire for future hops.
This is NOT RECOMMENDED unless the proxy knows additional information about the media.
For example, a proxy could use the PTS as the delivery order to enable head-of-line blocking for content that should not be skipped, like an advertisement.</t>

</section>
<section anchor="decoder" title="Decoder">
<t>The decoder will receive multiple segments in parallel and out of order.</t>

<t>Segments arrive in delivery order, but media usually needs to be processed in decode order.
The decoder SHOULD use a buffer to reassmble segments into decode order and it SHOULD skip segments after a configurable duration.
The amount of time the decoder is willing to wait for a segment (buffer duration) is what ultimately determines the latency.</t>

<t>Segments MUST synchronize segments using presentation timestamps within the bitstream.
Segments are NOT REQUIRED to be aligned and the decoder MUST be prepared to skip over any gaps.</t>

</section>
</section>
<section anchor="quic" title="QUIC">

<section anchor="establishment" title="Establishment">
<t>A connection is established using WebTransport <xref target="WebTransport"/>.</t>

<t>To summarize:
The client issues a HTTP CONNECT request with the intention of establishing a new WebTransport session.
The server returns an 200 OK response if the WebTransport session has been established, or an error status otherwise.</t>

<t>A WebTransport session exposes the basic QUIC service abstractions.
Specifically, either endpoint may create independent streams which are reliably delivered in order until canceled.</t>

<t>WebTransport can currently operate via HTTP/3 and HTTP/2, using QUIC or TCP under the hood respectively.
As mentioned in the motivation (<xref target="motivation"/>) section, TCP introduces head-of-line blocking and will result in a worse experience.
It is RECOMMENDED to use WebTransport over HTTP/3.</t>

<t>The application SHOULD use the CONNECT request for authentication and negotiation.
For example, including a authentication token and some identifier in the path.
The application MAY use QUIC streams for more complicated behavior.</t>

</section>
<section anchor="streams" title="Streams">
<t>Warp endpoints communicate over unidirectional QUIC streams.
The application MAY use bidirectional QUIC streams for other purposes.</t>

<t>A stream consists of sequential messages.
See messages (<xref target="messages"/>) for the list of messages and their encoding.
These are similar to QUIC and HTTP/3 frames, but called messages to avoid the media terminology.</t>

<t>Each stream MUST start with a <spanx style="verb">HEADERS</spanx> message that indicates how the stream should be transmitted.</t>

<t>Messages SHOULD be sent over the same stream if ordering is desired.
For example, <spanx style="verb">PAUSE</spanx> and <spanx style="verb">PLAY</spanx> messages SHOULD be sent on the same stream to avoid a race.</t>

</section>
<section anchor="prioritization" title="Prioritization">
<t>Warp utilizes stream prioritization to deliver the most important content during congestion.</t>

<t>The encoder may assign a numeric delivery order to each stream (<xref target="delivery-order"/>)
This is a strict prioritization scheme, such that any available bandwidth is allocated to streams in ascending priority order.
The sender SHOULD prioritize streams based on the delivery order.
If two streams have the same delivery order, they SHOULD receive equal bandwidth (round-robin).</t>

<t>QUIC supports stream prioritization but does not standardize any mechanisms; see Section 2.3 in <xref target="QUIC"/>.
In order to support prioritization, a QUIC library MUST expose a API to set the priority of each stream.
This is easy to implement; the next QUIC packet should contain a STREAM frame for the next pending stream in priority order.
It is OPTIONAL to prioritize retransmissions within flow control limits.</t>

<t>The delivery order is written on the wire so it can be easily parsed by proxies.
A proxy SHOULD obey the stream priority.</t>

</section>
<section anchor="cancellation" title="Cancellation">
<t>A QUIC stream MAY be canceled at any point with an error code.
The producer does this via a <spanx style="verb">RESET_STREAM</spanx> frame while the consumer requests cancelation with a <spanx style="verb">STOP_SENDING</spanx> frame.</t>

<t>When using <spanx style="verb">order</spanx>, lower priority streams will be starved during congestion, perhaps indefinitely.
These streams will consume resources and flow control until they are canceled.
When nearing resource limits, an endpoint SHOULD cancel the lowest priority stream with error code 0.</t>

<t>The producer or consumer MAY cancel streams in response to congestion.
This can be useful when the sender does not support stream prioritization.</t>

</section>
<section anchor="congestion-control" title="Congestion Control">
<t>As covered in the motivation section (<xref target="motivation"/>), the ability to prioritize or cancel streams is a form of congestion response.
It's equally important to detect congestion via congestion control, which is handled in the QUIC layer <xref target="QUIC-RECOVERY"/>.</t>

<t>Bufferbloat is caused by routers queueing packets for an indefinite amount of time rather than drop them.
This latency significantly reduces the ability for the application to prioritize or drop media in response to congestion.
Senders SHOULD use a congestion control algorithm that reduces this bufferbloat (ex. <xref target="BBR"/>).
It is NOT RECOMMENDED to use a loss-based algorithm (ex. <xref target="NewReno"/>) unless the network fully supports ECN.</t>

<t>Live media is application-limited, which means that the encoder determines the max bitrate rather than the network.
Most TCP congestion control algorithms will only increase the congestion window if it is full, limiting the upwards mobility when application-limited.
Senders SHOULD use a congestion control algorithm that is designed for application-limited flows (ex. GCC).
Senders MAY periodically pad the connection with QUIC PING frames to fill the congestion window.</t>

</section>
<section anchor="termination" title="Termination">
<t>The QUIC connection can be terminated at any point with an error code.</t>

<t>The media producer MAY terminate the QUIC connection with an error code of 0 to indicate the clean termination of the broadcast.
The application SHOULD use a non-zero error code to indicate a fatal error.</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Reason</ttcol>
      <c>0x0</c>
      <c>Broadcast Terminated</c>
      <c>0x1</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

</section>
</section>
<section anchor="messages" title="Messages">
<t>Messages consist of a type identifier followed by contents, depending on the message type.</t>

<t>TODO document the encoding</t>

<texttable>
      <ttcol align='right'>ID</ttcol>
      <ttcol align='left'>Messages</ttcol>
      <c>0x0</c>
      <c>HEADERS <xref target="headers"/></c>
      <c>0x1</c>
      <c>SEGMENT <xref target="segment"/></c>
      <c>0x2</c>
      <c>APP <xref target="app"/></c>
      <c>0x10</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

<section anchor="headers" title="HEADERS">
<t>The <spanx style="verb">HEADERS</spanx> message contains information required to deliver, cache, and forward a stream.
This message SHOULD be parsed and obeyed by any Warp proxies.</t>

<t><list style="symbols">
  <t><spanx style="verb">id</spanx>.
An unique identifier for the stream.
This field is optional and MUST be unique if set.</t>
  <t><spanx style="verb">order</spanx>.
An integer indicating the delivery order (<xref target="delivery-order"/>).
A sender SHOULD transmit streams with smallest value first, as bandwidth permits.
If two streams use the same value, they SHOULD be allocated the same bandwidth (round-robin).
Note that streams can still arrive out of the intended order due to packet loss.
This field is optional and the default value is 0.</t>
  <t><spanx style="verb">depends</spanx>.
An list of dependencies by stream identifier.
The decoder SHOULD process the specified dependencies first.
The decoder MAY support stream processing via the decode timestamp (DTS), such that it does not need to fully receive the dependency segments first.
The segment SHOULD have a larger <spanx style="verb">order</spanx> than its dependencies, if present.
This field is optional.</t>
</list></t>

</section>
<section anchor="segment" title="SEGMENT">
<t>A <spanx style="verb">SEGMENT</spanx> message consists of a segment in a fragmented MP4 container.</t>

<t>Each segment MUST start with an initialization fragment, or MUST depend on a segment with an initialization fragment.
An initialization fragment consists of a File Type Box (ftyp) followed by a Movie Box (moov).
This Movie Box (moov) consists of Movie Header Boxes (mvhd), Track Header Boxes (tkhd), Track Boxes (trak), followed by a final Movie Extends Box (mvex).
These boxes MUST NOT contain any samples and MUST have a duration of zero.
Note that a Common Media Application Format Header <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Each segment MAY have a Segment Type Box (styp) followed by any number of media fragments.
Each media fragment consists of a Movie Fragment Box (moof) followed by a Media Data Box (mdat).
The Media Fragment Box (moof) MUST contain a Movie Fragment Header Box (mfhd) and Track Box (trak) with a Track ID (<spanx style="verb">track_ID</spanx>) matching a Track Box in the initialization fragment.
Note that a Common Media Application Format Segment <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Media fragments can be packaged at any frequency, causing a trade-off between overhead and latency.
It is RECOMMENDED that a media fragment consists of a single frame to minimize latency.</t>

</section>
<section anchor="app" title="APP">
<t>The <spanx style="verb">APP</spanx> message contains arbitrary contents.</t>

</section>
<section anchor="goaway" title="GOAWAY">
<t>The <spanx style="verb">GOAWAY</spanx> message is sent by the server to force the client to reconnect.
This is useful for server maintenance or reassignments without severing the QUIC connection.
The server MAY be a producer or consumer.</t>

<t>The server:</t>

<t><list style="symbols">
  <t>MAY initiate a graceful shutdown by sending a GOAWAY message.</t>
  <t>MUST close the QUIC connection after a timeout with the GOAWAY error code (<xref target="termination"/>).</t>
  <t>MAY close the QUIC connection with a different error code if there is a fatal error before shutdown.</t>
  <t>SHOULD wait until the <spanx style="verb">GOAWAY</spanx> message and any pending streams have been fully acknowledged, plus an extra delay to ensure they have been processed.</t>
</list></t>

<t>The client:</t>

<t><list style="symbols">
  <t>MUST establish a new WebTransport session to the provided URL upon receipt of a <spanx style="verb">GOAWAY</spanx> message.</t>
  <t>SHOULD establish the connection in parallel which MUST use different QUIC connection.</t>
  <t>SHOULD remain connected for two servers for a short period, processing segments from both in parallel.</t>
</list></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="resource-exhaustion" title="Resource Exhaustion">
<t>Live media requires significant bandwidth and resources.
Failure to set limits will quickly cause resource exhaustion.</t>

<t>Warp uses QUIC flow control to impose resource limits at the network layer.
Endpoints SHOULD set flow control limits based on the anticipated media bitrate.</t>

<t>The media producer prioritizes and transmits streams out of order.
Streams might be starved indefinitely during congestion and SHOULD be canceled after hitting some timeout or resource limit.</t>

<t>The media consumer might receive streams out of order.
If stream data is buffered, for example to decode segments in order, then the media consumer SHOULD cancel a stream after hitting some timeout or resource limit.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>TODO</t>

</section>
<section anchor="appendix.encoding" title="Appendix A. Video Encoding">
<t>In order to transport media, we first need to know how media is encoded.
This section is an overview of media encoding.</t>

<section anchor="tracks" title="Tracks">
<t>A broadcast consists of one or more tracks.
Each track has a type (audio, video, caption, etc) and uses a cooresponding codec.
There may be multiple tracks, including of the same type for a number of reasons.</t>

<t>For example:</t>

<t><list style="symbols">
  <t>A track for each codec.</t>
  <t>A track for each resolution and bitrate.</t>
  <t>A track for each language.</t>
  <t>A track for each camera feed.</t>
</list></t>

<t>Tracks can be muxed together into a single container or stream.
The goal of Warp is to independently deliver tracks, and even parts of a track, so this is not allowed.
Each Warp segment MUST contain a single track.</t>

</section>
<section anchor="appendix.init" title="Init">
<t>Media codecs have a wide array of configuration options.
For example, the resolution, the color space, the features enabled, etc.</t>

<t>Before playback can begin, the decoder needs to know how the configuration.
This is done via a short payload at the very start of the media file.
The initialization payload can be cached and reused between segments with the same configuration.</t>

</section>
<section anchor="appendix.video" title="Video">
<t>Video is a sequence of pictures (frames) with a presentation timestamp (PTS).</t>

<t>An I-frame is a frame with no dependencies and is effectively an image file.
These frames are usually inserted at a frequent interval to support seeking or joining a live stream.
However they can also improve compression when used at hard scene cuts.</t>

<t>A P-frame is a frame that references on one or more earlier frames.
These frames are delta-encoded, such that they only encode the changes (typically motion).
This result in a massive file size reduction for most content outside of few notorious cases (ex. confetti).</t>

<t>A common encoding structure is to only reference the previous frame, as it is simple and minimizes latency:</t>

<figure><artwork><![CDATA[
 I <- P <- P <- P   I <- P <- P <- P   I <- P ...
]]></artwork></figure>

<t>There is no such thing as an optimal encoding structure.
Encoders tuned for the best quality will produce a tangled spaghetti of references.
Encoders tuned for the lowest latency can avoid reference frames to allow more to be dropped.</t>

<section anchor="appendix.b-frame" title="B-Frames">
<t>The goal of video codecs is to maximize compression.
One of the improvements is to allow a frame to reference later frames.</t>

<t>A B-frame is a frame that can reference one or more frames in the future, and any number of frames in the past.
These frames are more difficult to encode/decode as they require buffering and reordering.</t>

<t>A common encoding structure is to use B-frames in a fixed pattern.
Such a fixed pattern is not optimal, but it's simpler for hardware encoding:</t>

<figure><artwork><![CDATA[
    B     B         B     B         B
   / \   / \       / \   / \       / \
  v   v v   v     v   v v   v     v   v
 I <-- P <-- P   I <-- P <-- P   I <-- P ...
]]></artwork></figure>

<t>The encoder outputs the bitstream in decode order, which means that each frame is output after its references.
This makes it easier for the decoder as all references are earlier in the bitstream and can be decoded immediately.</t>

<t>However, this causes problems with B-frames because they depend on a future frame, and some reordering has to occur.
In order to keep track of this, frames have a decode timestamp (DTS) in addition to a presentation timestamp (PTS).
A B-frame will have higher DTS value that its dependencies, while PTS and DTS will be the same for other frame types.</t>

<t>For the example above, this would look like:</t>

<figure><artwork><![CDATA[
PTS: I B P B P I B P B P B
DTS: I   PB  PBI   PB  PB
]]></artwork></figure>

<t>B-frames add latency because of this reordering so they are usually not used for conversational latency.</t>

</section>
<section anchor="appendix.gop" title="Group of Pictures">
<t>A group of pictures (GoP) is an I-frame followed by any number of frames until the next I-frame.
All frames MUST reference, either directly or indirectly, only the most recent I-frame.</t>

<figure><artwork><![CDATA[
        GoP               GoP            GoP
+-----------------+-----------------+---------------
|     B     B     |     B     B     |     B
|    / \   / \    |    / \   / \    |    / \
|   v   v v   v   |   v   v v   v   |   v   v
|  I <-- P <-- P  |  I <-- P <-- P  |  I <-- P ...
+-----------------+-----------------+--------------
]]></artwork></figure>

<t>This is a useful abstraction because GoPs can always be decoded independently.</t>

</section>
<section anchor="appendix.svc" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy.
This layered coding means that dropping the top layer degrades the user experience in a configured way.
Examples include reducing the resolution, picture quality, and/or frame rate.</t>

<t>Here is an example SVC encoding with 3 resolutions:</t>

<figure><artwork><![CDATA[
      +-------------------------+------------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P ...
      +-------------------------+------------------
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.audio" title="Audio">
<t>Audio is dramatically simpler than video as it is not typically delta encoded.
Audio samples are grouped together (group of samples) at a configured rate, also called a "frame".</t>

<t>The encoder spits out a continuous stream of samples (S):</t>

<figure><artwork><![CDATA[
S S S S S S S S S S S S S ...
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.examples" title="Appendix B. Segment Examples">
<t>Warp offers a large degree of flexability on how segments are fragmented and prioritized.
There is no best solution; it depends on the desired complexity and user experience.</t>

<t>This section provides a summary of some options available.</t>

<section anchor="video" title="Video">

<section anchor="group-of-pictures" title="Group of Pictures">
<t>A group of pictures (GoP) is consists of an I-frame and all frames that directly or indirectly reference it (<xref target="appendix.gop"/>).
The tail of a GoP can be dropped without causing decode errors, even if the encoding is otherwise unknown, making this the safest option.</t>

<t>It is RECOMMENDED that each segment consist of a single GoP.
For example:</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
]]></artwork></figure>

<t>Depending on the video encoding, this approach may introduce unnecessary ordering and dependencies.
A better option may be available below.</t>

</section>
<section anchor="scalable-video-coding" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy (<xref target="appendix.svc"/>).</t>

<t>When SVC is used, it is RECOMMENDED that each segment consist of a single layer and GoP.
For example:</t>

<figure><artwork><![CDATA[
               segment 3             segment 6
      +-------------------------+---------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 2             segment 5
      +-------------------------+---------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 1             segment 4
      +-------------------------+---------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P
      +-------------------------+---------------
]]></artwork></figure>

</section>
<section anchor="frames" title="Frames">
<t>With full knowledge of the encoding, the encoder MAY can split a GoP into multiple segments based on the frame.
However, this is highly dependent on the encoding, and the additional complexity might not improve the user experience.</t>

<t>For example, we could split our example B-frame structure (<xref target="appendix.b-frame"/>) into 13 segments:</t>

<figure><artwork><![CDATA[
      2     4           7     9           12
+--------+--------+--------+--------+-----------+
|     B  |  B     |     B  |  B     |     B     |
|-----+--+--+-----+-----+--+--+-----+-----+-----+
|  I  |  P  |  P  |  I  |  P  |  P  |  I  |  P  |
+-----+-----+-----+-----+-----+-----+-----+-----+
   1     3     5     6     8     10    11    13
]]></artwork></figure>

<t>To reduce the number of segments, segments can be merged with their dependency.
QUIC streams will deliver each segment in order so this produces the same result as reordering within the application.</t>

<t>The same GoP structure can be represented using eight segments:</t>

<figure><artwork><![CDATA[
      2     3           5     6           8
+--------+--------+-----------------+------------
|     B  |  B     |     B  |  B     |     B     |
+--------+--------+--------+--------+-----------+
|  I     P     P  |  I     P     P  |  I     P
+-----------------+-----------------+------------
         1                 4              7
]]></artwork></figure>

<t>We can further reduce the number of segments by combining frames that don't depend on each other.
The only restriction is that frames can only reference frames earlier in the segment, or within a dependency segment.
For example, non-reference frames can have their own segment so they can be prioritized or dropped separate from reference frames.</t>

<t>The same GoP structure can also be represented using six segments, although we've removed the ability to drop individual B-frames:</t>

<figure><artwork><![CDATA[
   segment 2     segment 4   segment 6
+-------------+-------------+---------
|    B   B    |    B   B    |    B
+-------------+-------------+---------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+---------
   segment 1     segment 3   segment 5
]]></artwork></figure>

</section>
<section anchor="init" title="Init">
<t>Initialization data (<xref target="appendix.init"/>) is required to initialize the decoder.
Each segment MAY start with initialization data although this adds overhead.</t>

<t>Instead, it is RECOMMENDED to create a init segment.
Each media segment can then depend on the init segment to avoid the redundant overhead.
For example:</t>

<figure><artwork><![CDATA[
    segment 2       segment 3    segment 5
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
|              init             |  init
+-------------------------------+---------
             segment 1           segment 4
]]></artwork></figure>

</section>
</section>
<section anchor="audio" title="Audio">
<t>Audio (<xref target="appendix.audio"/>) is much simpler than video so there's fewer options.</t>

<t>The simplest configuration is to use a single segment for each audio track.
This may seem inefficient given the ease of dropping audio samples.
However, the audio bitrate is low and gaps cause quite a poor user experience, when compared to video.</t>

<figure><artwork><![CDATA[
         segment 1
+---------------------------
| S S S S S S S S S S S S S
+---------------------------
]]></artwork></figure>

<t>An improvement is to periodically split audio samples into separate segments.
This gives the consumer the ability to skip ahead during severe congestion or temporary connectivity loss.</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
]]></artwork></figure>

<t>This frequency of audio segments is configurable, at the cost of additional overhead.
It's NOT RECOMMENDED to create a segment for each audio frame because of this overhead.</t>

<t>Since video can only recover from severe congestion with an I-frame, so there's not much point recovering audio at a separate interval.
It is RECOMMENDED to create a new audio segment at each video I-frame.</t>

<figure><artwork><![CDATA[
    segment 1       segment 3    segment 5
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
    segment 2       segment 4    segment 6
]]></artwork></figure>

</section>
<section anchor="appendix.delivery-order" title="Delivery Order">
<t>The delivery order (<xref target="delivery-order"/> depends on the desired user experience during congestion:</t>

<t><list style="symbols">
  <t>if media should be skipped: delivery order = PTS</t>
  <t>if media should not be skipped: delivery order = -PTS</t>
  <t>if video should be skipped before audio: audio delivery order &lt; video delivery order</t>
</list></t>

<t>The delivery order may be changed if the content changes.
For example, switching from a live stream (skippable) to an advertisement (unskippable).</t>

</section>
</section>
<section numbered="false" anchor="contributors" title="Contributors">

<t><list style="symbols">
  <t>Alan Frindell</t>
  <t>Charles Krasic</t>
  <t>Cullen Jennings</t>
  <t>James Hurley</t>
  <t>Jordi Cenzano</t>
  <t>Mike English</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='QUIC' target='https://www.rfc-editor.org/info/rfc9000'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='M. Thomson' initials='M.' role='editor' surname='Thomson'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t></abstract>
</front>
<seriesInfo name='RFC' value='9000'/>
<seriesInfo name='DOI' value='10.17487/RFC9000'/>
</reference>



<reference anchor='QUIC-RECOVERY' target='https://www.rfc-editor.org/info/rfc9002'>
<front>
<title>QUIC Loss Detection and Congestion Control</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='I. Swett' initials='I.' role='editor' surname='Swett'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document describes loss detection and congestion control mechanisms for QUIC.</t></abstract>
</front>
<seriesInfo name='RFC' value='9002'/>
<seriesInfo name='DOI' value='10.17487/RFC9002'/>
</reference>


<reference anchor='WebTransport'>
   <front>
      <title>WebTransport over HTTP/3</title>
      <author fullname='Alan Frindell' initials='A.' surname='Frindell'>
         <organization>Facebook</organization>
      </author>
      <author fullname='Eric Kinnear' initials='E.' surname='Kinnear'>
         <organization>Apple Inc.</organization>
      </author>
      <author fullname='Victor Vasiliev' initials='V.' surname='Vasiliev'>
         <organization>Google</organization>
      </author>
      <date day='6' month='July' year='2022'/>
      <abstract>
	 <t>   WebTransport [OVERVIEW] is a protocol framework that enables clients
   constrained by the Web security model to communicate with a remote
   server using a secure multiplexed transport.  This document describes
   a WebTransport protocol that is based on HTTP/3 [HTTP3] and provides
   support for unidirectional streams, bidirectional streams and
   datagrams, all multiplexed within the same HTTP/3 connection.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-webtrans-http3-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-webtrans-http3-03.txt' type='TXT'/>
</reference>


<reference anchor="ISOBMFF" >
  <front>
    <title>Information technology â Coding of audio-visual objects â Part 12: ISO Base Media File Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="December"/>
  </front>
</reference>




<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CMAF" >
  <front>
    <title>Information technology -- Multimedia application format (MPEG-A) -- Part 19: Common media application format (CMAF) for segmented media</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020" month="March"/>
  </front>
</reference>




<reference anchor='NewReno' target='https://www.rfc-editor.org/info/rfc6582'>
<front>
<title>The NewReno Modification to TCP's Fast Recovery Algorithm</title>
<author fullname='T. Henderson' initials='T.' surname='Henderson'><organization/></author>
<author fullname='S. Floyd' initials='S.' surname='Floyd'><organization/></author>
<author fullname='A. Gurtov' initials='A.' surname='Gurtov'><organization/></author>
<author fullname='Y. Nishida' initials='Y.' surname='Nishida'><organization/></author>
<date month='April' year='2012'/>
<abstract><t>RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery.  RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to &quot;partial acknowledgments&quot; (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK.  This document describes a specific algorithm for responding to partial acknowledgments, referred to as &quot;NewReno&quot;.  This response to partial acknowledgments was first proposed by Janey Hoe.  This document obsoletes RFC 3782.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6582'/>
<seriesInfo name='DOI' value='10.17487/RFC6582'/>
</reference>


<reference anchor='BBR'>
   <front>
      <title>BBR Congestion Control</title>
      <author fullname='Neal Cardwell' initials='N.' surname='Cardwell'>
         <organization>Google</organization>
      </author>
      <author fullname='Yuchung Cheng' initials='Y.' surname='Cheng'>
         <organization>Google</organization>
      </author>
      <author fullname='Soheil Hassas Yeganeh' initials='S. H.' surname='Yeganeh'>
         <organization>Google</organization>
      </author>
      <author fullname='Ian Swett' initials='I.' surname='Swett'>
         <organization>Google</organization>
      </author>
      <author fullname='Van Jacobson' initials='V.' surname='Jacobson'>
         <organization>Google</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies the BBR congestion control algorithm.  BBR
   (&quot;Bottleneck Bandwidth and Round-trip propagation time&quot;) uses recent
   measurements of a transport connection&#39;s delivery rate, round-trip
   time, and packet loss rate to build an explicit model of the network
   path.  BBR then uses this model to control both how fast it sends
   data and the maximum volume of data it allows in flight in the
   network at any time.  Relative to loss-based congestion control
   algorithms such as Reno [RFC5681] or CUBIC [RFC8312], BBR offers
   substantially higher throughput for bottlenecks with shallow buffers
   or random losses, and substantially lower queueing delays for
   bottlenecks with deep buffers (avoiding &quot;bufferbloat&quot;).  BBR can be
   implemented in any transport protocol that supports packet-delivery
   acknowledgment.  Thus far, open source implementations are available
   for TCP [RFC793] and QUIC [RFC9000].  This document specifies version
   2 of the BBR algorithm, also sometimes referred to as BBRv2 or bbr2.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-cardwell-iccrg-bbr-congestion-control-02'/>
   <format target='https://www.ietf.org/archive/id/draft-cardwell-iccrg-bbr-congestion-control-02.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
8ClY8axeDv4DgyOoLrSGAAA=

-->

</rfc>

