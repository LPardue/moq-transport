<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-lcurley-warp-latest" category="info">

  <front>
    <title abbrev="WARP">Warp - Segmented Live Media Transport</title>

    <author initials="L." surname="Curley" fullname="Luke Curley">
      <organization>Twitch</organization>
      <address>
        <email>kixelated@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Pugin" fullname="Kirill Pugin">
      <organization>Meta</organization>
      <address>
        <email>ikir@meta.com</email>
      </address>
    </author>
    <author initials="S." surname="Nandakumar" fullname="Suhas Nandakumar">
      <organization>Cisco</organization>
      <address>
        <email>snandaku@cisco.com</email>
      </address>
    </author>

    <date />

    <area>General</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the core behavior for Warp, a segmented live media transport protocol.
Media is split into segments based on the underlying media encoding.
Each segment is transmitted independently over a QUIC stream.
QUIC streams are prioritized, allowing less important segments to be starved or dropped during congestion.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>Warp is a live media transport protocol that utilizes the QUIC network protocol <xref target="QUIC"/>.</t>

<t><xref target="motivation"/> covers the background and rationale behind Warp.
<xref target="segments"/> covers how media is encoded and split into segments.
<xref target="quic"/> covers how QUIC is used to transfer media.
<xref target="messages"/> covers how messages are encoded on the wire.</t>

<section anchor="terms-and-definitions" title="Terms and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Commonly used terms in this document are described below.</t>

<t><list style="hanging">
  <t hangText="Bitstream:">
  A continunous series of bytes.</t>
  <t hangText="Codec:">
  A compression algorithm for audio or video.</t>
  <t hangText="Congestion:">
  Packet loss and queuing caused by degraded or overloaded networks.</t>
  <t hangText="Consumer:">
  A QUIC endpoint receiving media over the network. This could be the media player or middleware.</t>
  <t hangText="Container:">
  A file format containing timestamps and the codec bitstream</t>
  <t hangText="Decoder:">
  A endpoint responsible for a deflating a compressed media stream into raw frames.</t>
  <t hangText="Decode Timestamp (DTS):">
  A timestamp indicating the order that frames/samples should be fed to the decoder.</t>
  <t hangText="Encoder:">
  A component responsible for creating a compressed media stream out of raw frames.</t>
  <t hangText="Frame:">
  An video image or group of audio samples to be rendered at a specific point in time.</t>
  <t hangText="I-frame:">
  A frame that does not depend on the contents of other frames; effectively an image.</t>
  <t hangText="Group of pictures (GoP):">
  A I-frame followed by a sequential series of dependent frames.</t>
  <t hangText="Group of samples:">
  A sequential series of audio samples starting at a given timestamp.</t>
  <t hangText="Player:">
  A component responsible for presenting frames to a viewer based on the presentation timestamp.</t>
  <t hangText="Presentation Timestamp (PTS):">
  A timestamp indicating when a frames/samples should be presented to the viewer.</t>
  <t hangText="Producer:">
  A QUIC endpoint sending media over the network. This could be the media encoder or middleware.</t>
  <t hangText="Rendition:">
  One or more tracks with the same content but different encodings.</t>
  <t hangText="Slice:">
  A section of a video frame. There may be multiple slices per frame.</t>
  <t hangText="Track:">
  An encoded bitstream, representing a single video/audio component that makes up the larger broadcast.</t>
</list></t>

</section>
</section>
<section anchor="motivation" title="Motivation">

<section anchor="latency" title="Latency">
<t>In a perfect world, we could deliver live media at the same rate it is produced.
The end-to-end latency of a broadcast would be fixed and only subject to encoding and transmission delays.
Unfortunately, networks have variable throughput, primarily due to congestion.</t>

<t>Attempting to deliver media larger than this variable network bitrate causes queuing.
This queuing can occur anywhere in the path between the encoder and decoder.
For example: the application, the OS socket, a wifi router, within an ISP, or generally anywhere in transit.</t>

<t>If nothing is done, new frames will be appended to the end of a growing queue and will take longer to arrive than their predecessors, increasing latency.
Our job is to minimize the growth of this queue, and failing that, skip the queue when possible.</t>

<t>Thus speed at which a media protocol can detect and respond to queuing determines the latency.
We can generally classify existing media protocols into two categories based on the underlying network protocol:</t>

<t><list style="symbols">
  <t>TCP-based media protocols (ex. RTMP, HLS, DASH) are popular due to their simplicity.
Media is served/consumed in decode order while any networking is handled by the TCP layer.
However, these protocols primarily see use at higher latency targets due to their relatively slow detection and response to queuing.</t>
  <t>UDP-based media protocols (ex. RTP, WebRTC, SRT) can side-step the issues with TCP and provide lower latency with better queue management.
However the media protocol is now responsible for fragmentation, congestion control, retransmissions, receiver feedback, reassembly, and more.
This added complexity significantly raises the implementation difficulty and hurts interoperability.</t>
</list></t>

<t>A goal of this draft is to get the best of both worlds: a simple protocol that can still rapidly detect and respond to congestion.
This is possible emergence of QUIC, designed to fix the shortcomings of TCP.
This draft relies on QUIC streams to deliver media segments in priority order during congestion.</t>

</section>
<section anchor="universal" title="Universal">
<t>The media protocol ecosystem is fragmented; each protocol has it's own niche.
Specialization is often a good thing, but we believe there's enough overlap to warrant consolidation.</t>

<t>For example, a service might simultaneously ingest via WebRTC, SRT, RTMP, and/or a custom UDP protocol depending on the broadcaster.
The same service might then simultaneously distribute via WebRTC, LL-HLS, HLS, (or the DASH variants) and/or a custom UDP protocol depending on the viewer.</t>

<t>These media protocols are radically different and not interoperable; requiring transcoding or transmuxing.
This cost is further increased by the need to maintain separate stacks with different expertise requirements.</t>

<t>A goal of this draft is to cover a large spectrum of use-cases. Specifically:</t>

<t><list style="symbols">
  <t>Consolidated contribution and distribution.
The primary difference between the two is the ability to fanout.
How does a CDN know how to forward media to N consumers and how does it reduce the encoded bitrate during congestion?
A single protocol can cover both use-cases provided intermediaries are informed on how to forward and drop media.</t>
  <t>A configurable latency versus quality trade-off.
The producer (broadcaster) chooses how to encode and transmit media based on the desired user experience.
Each consumer (viewer) chooses how long to wait for media based on their desired user experience and network.
We want an experience that can vary from real-time and lossy for one viewer, to delayed and loss-less for another viewer, without separate encodings or protocols.</t>
</list></t>

</section>
<section anchor="intermediaries" title="Intermediaries">
<t>The prevailing belief is that UDP-based protocols are more expensive and don't "scale".
While it's true that UDP is more difficult to optimize than TCP, QUIC itself is proof that it is is possible to reach performance parity.
In fact even some TCP-based protocols (ex. RTMP) don't "scale" either and are exclusively used for contribution as a result.</t>

<t>The truth is that the ability to scale a media protocol depends on intermediary support: proxies, caches, CDNs, SFUs, etc.
The success of HTTP-based media protocols is due to the ability to leverage traditional HTTP CDNs.</t>

<t>Meanwhile, it's difficult to build a CDN for media protocols that were not designed with intermediaries in mind.
For example, an intermediary has to parse the underlying codec to determine which RTP packets should be dropped first, and the decision is not deterministic or consistent for each hop.</t>

<t>A goal of this draft is to treat intermediaries as first class citizens.
Any identification, reliability, ordering, prioritization, caching, etc is written to the wire in header designed for intermediaries.
This ensures that intermediaries can easily route/fanout media to the final destination.
This also ensures that congestion response is consistent at every hop based on the preferences of the media producer.</t>

</section>
</section>
<section anchor="segments" title="Segments">
<t>Warp works by splitting media into segments that can be transferred over the network somewhat independently.</t>

<t><list style="symbols">
  <t>The encoder determines how to fragment the encoded bitstream into segments (<xref target="media"/>).</t>
  <t>Each segment is encoded using a fragmented MP4 container (<xref target="container"/>).</t>
  <t>Segments are assigned an intended delivery order that should be obeyed during congestion (<xref target="delivery-order"/>)</t>
  <t>Each segment is transferred over a QUIC stream, which are delivered independently according to the segment properties (<xref target="properties"/>).</t>
  <t>The decoder receives each segment and skips any segments that do not arrive in time (<xref target="decoder"/>).</t>
</list></t>

<section anchor="media" title="Media">
<t>An encoder produces one or more codec bitstreams for each track.
The bitstreams are fed to the decoder on the other end, after being transported over the network, in the same order its produced.
The problem, as explained in motivation (<xref target="latency"/>), is that networks cannot sustain a continuous rate and thus queuing occurs.
See the appendix for an overview of media encoding (<xref target="appendix.encoding"/>).</t>

<t>Warp works by fragmenting the bitstream into segments that can be transmitted independently.
Depending on how the segments are fragmented, the decoder has the ability to safely drop media during congestion.
See the appendix for fragmentation examples (<xref target="appendix.examples"/>)</t>

<t>A segment:</t>

<t><list style="symbols">
  <t>MUST contain a single track.</t>
  <t>MUST be in decode order. This means an increasing DTS.</t>
  <t>MAY contain any number of frames/samples.</t>
  <t>MAY have gaps between frames/samples.</t>
  <t>MAY overlap with other segments. This means interleaved timestamps.</t>
  <t>MAY reference frames in other segments, but only if listed as a dependency.</t>
</list></t>

</section>
<section anchor="container" title="Container">
<t>Segments are encoded using fragmented MP4 <xref target="ISOBMFF"/>.
This is necessary to store timestamps and various metadata depending on the codec.
A future draft of Warp may specify other container formats.</t>

<t>Each segment MUST start with an initialization fragment, or MUST depend on a segment with an initialization fragment.
An initialization fragment consists of a File Type Box (ftyp) followed by a Movie Box (moov).
This Movie Box (moov) consists of Movie Header Boxes (mvhd), Track Header Boxes (tkhd), Track Boxes (trak), followed by a final Movie Extends Box (mvex).
These boxes MUST NOT contain any samples and MUST have a duration of zero.
Note that a Common Media Application Format Header <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Each segment MAY have a Segment Type Box (styp) followed by any number of media fragments.
Each media fragment consists of a Movie Fragment Box (moof) followed by a Media Data Box (mdat).
The Media Fragment Box (moof) MUST contain a Movie Fragment Header Box (mfhd) and Track Box (trak) with a Track ID (<spanx style="verb">track_ID</spanx>) matching a Track Box in the initialization fragment.
Note that a Common Media Application Format Segment <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Media fragments can be packaged at any frequency, causing a trade-off between overhead and latency.
It is RECOMMENDED that a media fragment consists of a single frame to minimize latency.</t>

</section>
<section anchor="delivery-order" title="Delivery Order">
<t>Media is produced with an intended order, both in terms of when media should be presented (PTS) and when media should be decoded (DTS).
As stated in motivation (<xref target="latency"/>), the network is unable to maintain this ordering during congestion without increasing latency.</t>

<t>Warp responds to congestion by assigning each segment a numeric delivery order.
The delivery order SHOULD be followed when possible to ensure that the most important media is delivered when throughput is limited.
Note that the contents within each segment are still delivered in order; this delivery order only applies to the ordering between segments.</t>

<t>The encoder determines the value assigned to each segment based the media encoding and desired user experience.
Multiple segments MAY use the same value, in which case they SHOULD be delivered via round-robin.
See the appendix for examples (<xref target="appendix.examples"/>).</t>

<t>A sender SHOULD attempt to deliver segments based on this delivery order.
This effectively involves creating a priority queue in ascending order, allocating any avaiable bandwidth to the next pending segment.
Since each segment is sent over a dedicated QUIC stream, the next QUIC packet SHOULD contain a STREAM frame for the next pending segment, repeated until the congestion window is hit.
The sender MAY ignore the delivery order for retransmits and MUST ignore it when flow control limits are reached.</t>

<t>A receiver MUST NOT assume that segments will be received in delivery order for a number of reasons:
* Newly encoded segments MAY have a smaller delivery order than outstanding segments.
* Packet loss or flow control MAY delay the delivery of individual streams.
* The sender might not support QUIC stream prioritization.</t>

<t>Segments arrive in delivery order, but media usually needs to be processed in decode order.
The decoder SHOULD use a buffer to reassmble segments into decode order and it SHOULD skip segments after a configurable duration.
The amount of time the decoder is willing to wait for a segment (buffer duration) is what ultimately determines the latency.</t>

<t>A proxy MAY change the delivery order, in which case it SHOULD update the value on the wire for future hops.
This is NOT RECOMMENDED unless the proxy knows additional information about the media.
For example, a proxy could use the PTS as the delivery order to enable head-of-line blocking for content that should not be skipped, like an advertisement.</t>

</section>
<section anchor="properties" title="Properties">
<t>Each segment has properties to go along with its contents.
These are written on the wire and SHOULD be parsed by any Warp intermediaries.</t>

<t><list style="symbols">
  <t><spanx style="verb">id</spanx>.
An optional, numeric identifier for the segment.
This value is only used for association and identification; a receiver MUST NOT assume it is monotically increasing.
If non-zero, this value MUST be unique.
The default value is 0.</t>
  <t><spanx style="verb">order</spanx>.
An optional, numeric value indicating the delivery order (<xref target="delivery-order"/>).
A sender SHOULD transmit segments with smallest value first, as bandwidth permits.
If two segments use the same value, they SHOULD be round-robined.
Note that segments can still arrive out of the intended order due to packet loss.
The default value is 0.</t>
  <t><spanx style="verb">depends</spanx>.
An optional list of dependencies segments by ID.
The decoder SHOULD process the specified dependencies first.
The decoder MAY support stream processing via the decode timestamp (DTS), such that it does not need to fully receive the dependency segments first.
The segment SHOULD have a larger <spanx style="verb">order</spanx> than its dependencies, if present.
The default value is 0, which means no dependency.</t>
  <t><spanx style="verb">track</spanx>.
A numeric identifier of the track.
This MAY be different than the track ID within the container.</t>
</list></t>

</section>
<section anchor="decoder" title="Decoder">
<t>The decoder will receive multiple segments in parallel.
The decoder MUST synchronize segments using presentation timestamps within the bitstream.
The decoder SHOULD use a buffer to reorder frames/samples from separate segments into decode order.</t>

<t>Segments are NOT REQUIRED to be aligned.
A decoder MUST be prepared to skip over any gaps between segments.</t>

</section>
</section>
<section anchor="quic" title="QUIC">

<section anchor="establishment" title="Establishment">
<t>A connection is established using WebTransport <xref target="WebTransport"/>.</t>

<t>To summarize:
The client issues a HTTP CONNECT request with the intention of establishing a new WebTransport session.
The server returns an 200 OK response if the WebTransport session has been established, or an error status otherwise.</t>

<t>A WebTransport session exposes the basic QUIC service abstractions.
Specifically, either endpoint may create independent streams which are reliably delivered in order until canceled.</t>

<t>WebTransport can currently operate via HTTP/3 and HTTP/2, using QUIC or TCP under the hood respectively.
As mentioned in the motivation (<xref target="motivation"/>) section, TCP introduces head-of-line blocking and will result in a worse experience.
It is RECOMMENDED to use WebTransport over HTTP/3.</t>

<t>The application SHOULD use the CONNECT request for authentication and negotiation.
For example, including a authentication token and some identifier in the path.
The application MAY use QUIC streams for more complicated behavior.</t>

</section>
<section anchor="streams" title="Streams">
<t>Warp endpoints communicate over unidirectional QUIC streams.
The application MAY use bidirectional QUIC streams for other purposes.</t>

<t>A stream consists of sequential messages.
See messages (<xref target="messages"/>) for the list of messages and their encoding.
These are similar to QUIC and HTTP/3 frames, but called messages to avoid the media terminology.</t>

<t>Messages SHOULD be sent over the same stream if ordering is desired.
For example, <spanx style="verb">PAUSE</spanx> and <spanx style="verb">PLAY</spanx> messages SHOULD be sent on the same stream to avoid a race.</t>

</section>
<section anchor="prioritization" title="Prioritization">
<t>Warp utilizes stream prioritization to deliver the most important content during congestion.</t>

<t>The encoder SHOULD assign a numeric delivery order to each stream.
This is a strict prioritization scheme, such that any available bandwidth is allocated to streams in ascending order.
The delivery order is determined at encode, written to the wire so it can be read by intermediaries, and will not be updated.
This effectively creates a priority queue that can be maintained over multiple hops.</t>

<t>QUIC supports stream prioritization but does not standardize any mechanisms; see Section 2.3 in <xref target="QUIC"/>.
QUIC libraries will need to expose a API to the application to set the priority of each stream.</t>

<t>Senders SHOULD support prioritized streams, although it is OPTIONAL on a path with no expected congestion.
Senders SHOULD use strict ordering, although relative weights MAY be acceptable if there are no other options.
Senders MUST obey the order as written to the wire.
Senders MAY choose to delay retransmitting lower priority streams when possible within QUIC flow control limits.</t>

</section>
<section anchor="cancellation" title="Cancellation">
<t>QUIC streams can be canceled by either endpoint with an error code.</t>

<t>When using <spanx style="verb">order</spanx>, lower priority streams will be starved during congestion, perhaps indefinitely.
These streams will consume resources and flow control until they are canceled.
When nearing resource limits, an endpoint SHOULD cancel the lowest priority stream with error code 0.</t>

<t>When using <spanx style="verb">expires</spanx>, a stream SHOULD be canceled after the duration has elapsed.
This is not a full replacement for prioritization, but can provide some congestion response by clearing parts of the queue.</t>

</section>
<section anchor="congestion-control" title="Congestion Control">
<t>As covered in the motivation section (<xref target="motivation"/>), the ability to prioritize or cancel streams is a form of congestion response.
It's equally important to detect congestion via congestion control, which is handled in the QUIC layer <xref target="QUIC-RECOVERY"/>.</t>

<t>Bufferbloat is caused by routers queueing packets for an indefinite amount of time rather than drop them.
This latency significantly reduces the ability for the application to prioritize or drop media in response to congestion.
Senders SHOULD use a congestion control algorithm that reduces this bufferbloat (ex. <xref target="BBR"/>).
It is NOT RECOMMENDED to use a loss-based algorithm (ex. <xref target="NewReno"/>) unless the network fully supports ECN.</t>

<t>Live media is application-limited, which means that the encoder determines the max bitrate rather than the network.
Most TCP congestion control algorithms will only increase the congestion window if it is full, limiting the upwards mobility when application-limited.
Senders SHOULD use a congestion control algorithm that is designed for application-limited flows (ex. GCC).
Senders MAY periodically pad the connection with QUIC PING frames to fill the congestion window.</t>

</section>
<section anchor="termination" title="Termination">
<t>The QUIC connection can be terminated at any point with an error code.</t>

<t>The media producer MAY terminate the QUIC connection with an error code of 0 to indicate the clean termination of the broadcast.
The application SHOULD use a non-zero error code to indicate a fatal error.</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Reason</ttcol>
      <c>0x0</c>
      <c>Broadcast Terminated</c>
      <c>0x1</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

</section>
</section>
<section anchor="messages" title="Messages">
<t>Messages consist of a type identifier followed by contents, depending on the message type.</t>

<t>TODO document the encoding</t>

<texttable>
      <ttcol align='right'>ID</ttcol>
      <ttcol align='left'>Messages</ttcol>
      <c>0x0</c>
      <c>SEGMENT <xref target="segment"/></c>
      <c>0x1</c>
      <c>APP <xref target="app"/></c>
      <c>0x10</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

<section anchor="segment" title="SEGMENT">
<t>A <spanx style="verb">SEGMENT</spanx> message consists of the segment properties (<xref target="properties"/>) followed by the container (<xref target="container"/>).</t>

</section>
<section anchor="app" title="APP">
<t>The <spanx style="verb">APP</spanx> message contains arbitrary contents.</t>

</section>
<section anchor="goaway" title="GOAWAY">
<t>The <spanx style="verb">GOAWAY</spanx> message is sent by the server to force the client to reconnect.
This is useful for server maintenance or reassignments without severing the QUIC connection.
A server MAY use QUIC load balancing instead of a GOAWAY message.</t>

<t>The server:
* MAY initiate a graceful shutdown by sending a GOAWAY message.
* MUST close the QUIC connection after a timeout with the GOAWAY error code (<xref target="termination"/>).
* MAY close the QUIC connection with a different error code if there is a fatal error before shutdown.
* SHOULD wait until the <spanx style="verb">GOAWAY</spanx> message and any pending streams have been fully acknowledged, plus an extra delay to ensure they have been processed.</t>

<t>The client:
* MUST establish a new WebTransport session to the provided URL upon receipt of a <spanx style="verb">GOAWAY</spanx> message.
* SHOULD establish the connection in parallel which MUST use different QUIC connection.
* SHOULD remain connected for two servers for a short period, processing segments from both in parallel.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>TODO</t>

<section anchor="resource-exhaustion" title="Resource Exhaustion">
<t>Live media requires significant bandwidth and resources.
Failure to set limits will quickly cause resource exhaustion.</t>

<t>Warp uses QUIC flow control to impose resource limits at the network layer.
Endpoints SHOULD set flow control limits based on the anticipated media bitrate.</t>

<t>The media producer prioritizes and transmits streams out of order.
Streams might be starved indefinitely during congestion and SHOULD be canceled after hitting some timeout or resource limit.</t>

<t>The media consumer might receive streams out of order.
If stream data is buffered, for example to decode segments in order, then the media consumer SHOULD cancel a stream after hitting some timeout or resource limit.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>TODO</t>

</section>
<section anchor="appendix.encoding" title="Appendix A. Video Encoding">
<t>In order to transport media, we first need to know how media is encoded.
This section is an overview of media encoding.</t>

<section anchor="tracks" title="Tracks">
<t>A broadcast consists of one or more tracks.
Each track has a type (audio, video, caption, etc) and uses a cooresponding codec.
There may be multiple tracks, including of the same type for a number of reasons.</t>

<t>For example:</t>

<t><list style="symbols">
  <t>A track for each codec.</t>
  <t>A track for each resolution and bitrate.</t>
  <t>A track for each language.</t>
  <t>A track for each camera feed.</t>
</list></t>

<t>Tracks can be muxed together into a single container or stream.
The goal of Warp is to independently deliver tracks, and even parts of a track, so this is not allowed.
Each Warp segment MUST contain a single track.</t>

</section>
<section anchor="appendix.init" title="Init">
<t>Media codecs have a wide array of configuration options.
For example, the resolution, the color space, the features enabled, etc.</t>

<t>Before playback can begin, the decoder needs to know how the configuration.
This is done via a short payload at the very start of the media file.
The initialization payload can be cached and reused between segments with the same configuration.</t>

</section>
<section anchor="appendix.video" title="Video">
<t>Video is a sequence of pictures (frames) with a presentation timestamp (PTS).</t>

<t>An I-frame is a frame with no dependencies and is effectively an image file.
These frames are usually inserted at a frequent interval to support seeking or joining a live stream.
However they can also improve compression when used at hard scene cuts.</t>

<t>A P-frame is a frame that references on one or more earlier frames.
These frames are delta-encoded, such that they only encode the changes (typically motion).
This result in a massive file size reduction for most content outside of few notorious cases (ex. confetti).</t>

<t>A common encoding structure is to only reference the previous frame, as it is simple and minimizes latency:</t>

<figure><artwork><![CDATA[
 I <- P <- P <- P   I <- P <- P <- P   I <- P ...
]]></artwork></figure>

<t>There is no such thing as an optimal encoding structure.
Encoders tuned for the best quality will produce a tangled spaghetti of references.
Encoders tuned for the lowest latency can avoid reference frames to allow more to be dropped.</t>

<section anchor="appendix.b-frame" title="B-Frames">
<t>The goal of video codecs is to maximize compression.
One of the improvements is to allow a frame to reference later frames.</t>

<t>A B-frame is a frame that can reference one or more frames in the future, and any number of frames in the past.
These frames are more difficult to encode/decode as they require buffering and reordering.</t>

<t>A common encoding structure is to use B-frames in a fixed pattern.
Such a fixed pattern is not optimal, but it's simpler for hardware encoding:</t>

<figure><artwork><![CDATA[
    B     B         B     B         B
   / \   / \       / \   / \       / \
  v   v v   v     v   v v   v     v   v
 I <-- P <-- P   I <-- P <-- P   I <-- P ...
]]></artwork></figure>

<t>The encoder outputs the bitstream in decode order, which means that each frame is output after its references.
This makes it easier for the decoder as all references are earlier in the bitstream and can be decoded immediately.</t>

<t>However, this causes problems with B-frames because they depend on a future frame, and some reordering has to occur.
In order to keep track of this, frames have a decode timestamp (DTS) in addition to a presentation timestamp (PTS).
A B-frame will have higher DTS value that its dependencies, while PTS and DTS will be the same for other frame types.</t>

<t>For the example above, this would look like:</t>

<figure><artwork><![CDATA[
PTS: I B P B P I B P B P B
DTS: I   PB  PBI   PB  PB
]]></artwork></figure>

<t>B-frames add latency because of this reordering so they are usually not used for conversational latency.</t>

</section>
<section anchor="appendix.gop" title="Group of Pictures">
<t>A group of pictures (GoP) is an I-frame followed by any number of frames until the next I-frame.
All frames MUST reference, either directly or indirectly, only the most recent I-frame.</t>

<figure><artwork><![CDATA[
        GoP               GoP            GoP
+-----------------+-----------------+---------------
|     B     B     |     B     B     |     B
|    / \   / \    |    / \   / \    |    / \
|   v   v v   v   |   v   v v   v   |   v   v
|  I <-- P <-- P  |  I <-- P <-- P  |  I <-- P ...
+-----------------+-----------------+--------------
]]></artwork></figure>

<t>This is a useful abstraction because GoPs can always be decoded independently.</t>

</section>
<section anchor="appendix.svc" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy.
This layered coding means that dropping the top layer degrades the user experience in a configured way.
Examples include reducing the resolution, picture quality, and/or frame rate.</t>

<t>Here is an example SVC encoding with 3 resolutions:</t>

<figure><artwork><![CDATA[
      +-------------------------+------------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P ...
      +-------------------------+------------------
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.audio" title="Audio">
<t>Audio is dramatically simpler than video as it is not typically delta encoded.
Audio samples are grouped together (group of samples) at a configured rate, also called a "frame".</t>

<t>The encoder spits out a continuous stream of samples (S):</t>

<figure><artwork><![CDATA[
S S S S S S S S S S S S S ...
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.examples" title="Appendix B. Segment Examples">
<t>Warp offers a large degree of flexability on how segments are fragmented and prioritized.
There is no best solution; it depends on the desired complexity and user experience.</t>

<t>This section provides a summary of some options available.</t>

<section anchor="video" title="Video">

<section anchor="group-of-pictures" title="Group of Pictures">
<t>A group of pictures (GoP) is consists of an I-frame and all frames that directly or indirectly reference it (<xref target="appendix.gop"/>).
The tail of a GoP can be dropped without causing decode errors, even if the encoding is otherwise unknown, making this the safest option.</t>

<t>It is RECOMMENDED that each segment consist of a single GoP.
For example:</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
]]></artwork></figure>

<t>Depending on the video encoding, this approach may introduce unnecessary ordering and dependencies.
A better option may be available below.</t>

</section>
<section anchor="scalable-video-coding" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy (<xref target="appendix.svc"/>).</t>

<t>When SVC is used, it is RECOMMENDED that each segment consist of a single layer and GoP.
For example:</t>

<figure><artwork><![CDATA[
               segment 3             segment 6
      +-------------------------+---------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 2             segment 5
      +-------------------------+---------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 1             segment 4
      +-------------------------+---------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P
      +-------------------------+---------------
]]></artwork></figure>

</section>
<section anchor="frames" title="Frames">
<t>With full knowledge of the encoding, the encoder MAY can split a GoP into multiple segments based on the frame.
However, this is highly dependent on the encoding, and the additional complexity might not improve the user experience.</t>

<t>For example, we could split our example B-frame structure (<xref target="appendix.b-frame"/>) into 13 segments:</t>

<figure><artwork><![CDATA[
      2     4           7     9           12
+--------+--------+--------+--------+-----------+
|     B  |  B     |     B  |  B     |     B     |
|-----+--+--+-----+-----+--+--+-----+-----+-----+
|  I  |  P  |  P  |  I  |  P  |  P  |  I  |  P  |
+-----+-----+-----+-----+-----+-----+-----+-----+
   1     3     5     6     8     10    11    13
]]></artwork></figure>

<t>To reduce the number of segments, segments can be merged with their dependency.
QUIC streams will deliver each segment in order so this produces the same result as reordering within the application.</t>

<t>The same GoP structure can be represented using eight segments:</t>

<figure><artwork><![CDATA[
      2     3           5     6           8
+--------+--------+-----------------+------------
|     B  |  B     |     B  |  B     |     B     |
+--------+--------+--------+--------+-----------+
|  I     P     P  |  I     P     P  |  I     P
+-----------------+-----------------+------------
         1                 4              7
]]></artwork></figure>

<t>We can further reduce the number of segments by combining frames that don't depend on each other.
The only restriction is that frames can only reference frames earlier in the segment, or within a dependency segment.
For example, non-reference frames can have their own segment so they can be prioritized or dropped separate from reference frames.</t>

<t>The same GoP structure can also be represented using six segments, although we've removed the ability to drop individual B-frames:</t>

<figure><artwork><![CDATA[
   segment 2     segment 4   segment 6
+-------------+-------------+---------
|    B   B    |    B   B    |    B
+-------------+-------------+---------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+---------
   segment 1     segment 3   segment 5
]]></artwork></figure>

</section>
<section anchor="init" title="Init">
<t>Initialization data (<xref target="appendix.init"/>) is required to initialize the decoder.
Each segment MAY start with initialization data although this adds overhead.</t>

<t>Instead, it is RECOMMENDED to create a init segment.
Each media segment can then depend on the init segment to avoid the redundant overhead.
For example:</t>

<figure><artwork><![CDATA[
    segment 2       segment 3    segment 5
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
|              init             |  init
+-------------------------------+---------
             segment 1           segment 4
]]></artwork></figure>

</section>
</section>
<section anchor="audio" title="Audio">
<t>Audio (<xref target="appendix.audio"/>) is much simpler than video so there's fewer options.</t>

<t>The simplest configuration is to use a single segment for each audio track.
This may seem inefficient given the ease of dropping audio samples.
However, the audio bitrate is low and gaps cause quite a poor user experience, when compared to video.</t>

<figure><artwork><![CDATA[
         segment 1
+---------------------------
| S S S S S S S S S S S S S
+---------------------------
]]></artwork></figure>

<t>An improvement is to periodically split audio samples into separate segments.
This gives the consumer the ability to skip ahead during severe congestion or temporary connectivity loss.</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
]]></artwork></figure>

<t>This frequency of audio segments is configurable, at the cost of additional overhead.
It's NOT RECOMMENDED to create a segment for each audio frame because of this overhead.</t>

<t>Since video can only recover from severe congestion with an I-frame, so there's not much point recovering audio at a separate interval.
It is RECOMMENDED to create a new audio segment at each video I-frame.</t>

<figure><artwork><![CDATA[
    segment 1       segment 3    segment 5
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
    segment 2       segment 4    segment 6
]]></artwork></figure>

</section>
<section anchor="appendix.delivery-order" title="Delivery Order">
<t>The delivery order (<xref target="delivery-order"/> depends on the desired user experience during congestion:</t>

<t><list style="symbols">
  <t>if media should be skipped: delivery order = PTS</t>
  <t>if media should not be skipped: delivery order = -PTS</t>
  <t>if video should be skipped before audio: audio delivery order &lt; video delivery order</t>
</list></t>

<t>The delivery order may be changed if the content changes.
For example, switching from a live stream (skippable) to an advertisement (unskippable).</t>

</section>
</section>
<section numbered="false" anchor="contributors" title="Contributors">

<t>TODO</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='QUIC' target='https://www.rfc-editor.org/info/rfc9000'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='M. Thomson' initials='M.' role='editor' surname='Thomson'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t></abstract>
</front>
<seriesInfo name='RFC' value='9000'/>
<seriesInfo name='DOI' value='10.17487/RFC9000'/>
</reference>



<reference anchor='QUIC-RECOVERY' target='https://www.rfc-editor.org/info/rfc9002'>
<front>
<title>QUIC Loss Detection and Congestion Control</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='I. Swett' initials='I.' role='editor' surname='Swett'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document describes loss detection and congestion control mechanisms for QUIC.</t></abstract>
</front>
<seriesInfo name='RFC' value='9002'/>
<seriesInfo name='DOI' value='10.17487/RFC9002'/>
</reference>


<reference anchor='WebTransport'>
   <front>
      <title>WebTransport over HTTP/3</title>
      <author fullname='Alan Frindell' initials='A.' surname='Frindell'>
         <organization>Facebook</organization>
      </author>
      <author fullname='Eric Kinnear' initials='E.' surname='Kinnear'>
         <organization>Apple Inc.</organization>
      </author>
      <author fullname='Victor Vasiliev' initials='V.' surname='Vasiliev'>
         <organization>Google</organization>
      </author>
      <date day='6' month='July' year='2022'/>
      <abstract>
	 <t>   WebTransport [OVERVIEW] is a protocol framework that enables clients
   constrained by the Web security model to communicate with a remote
   server using a secure multiplexed transport.  This document describes
   a WebTransport protocol that is based on HTTP/3 [HTTP3] and provides
   support for unidirectional streams, bidirectional streams and
   datagrams, all multiplexed within the same HTTP/3 connection.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-webtrans-http3-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-webtrans-http3-03.txt' type='TXT'/>
</reference>


<reference anchor="ISOBMFF" >
  <front>
    <title>Information technology â Coding of audio-visual objects â Part 12: ISO Base Media File Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="December"/>
  </front>
</reference>




<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CMAF" >
  <front>
    <title>Information technology -- Multimedia application format (MPEG-A) -- Part 19: Common media application format (CMAF) for segmented media</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020" month="March"/>
  </front>
</reference>




<reference anchor='NewReno' target='https://www.rfc-editor.org/info/rfc6582'>
<front>
<title>The NewReno Modification to TCP's Fast Recovery Algorithm</title>
<author fullname='T. Henderson' initials='T.' surname='Henderson'><organization/></author>
<author fullname='S. Floyd' initials='S.' surname='Floyd'><organization/></author>
<author fullname='A. Gurtov' initials='A.' surname='Gurtov'><organization/></author>
<author fullname='Y. Nishida' initials='Y.' surname='Nishida'><organization/></author>
<date month='April' year='2012'/>
<abstract><t>RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery.  RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to &quot;partial acknowledgments&quot; (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK.  This document describes a specific algorithm for responding to partial acknowledgments, referred to as &quot;NewReno&quot;.  This response to partial acknowledgments was first proposed by Janey Hoe.  This document obsoletes RFC 3782.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6582'/>
<seriesInfo name='DOI' value='10.17487/RFC6582'/>
</reference>


<reference anchor='BBR'>
   <front>
      <title>BBR Congestion Control</title>
      <author fullname='Neal Cardwell' initials='N.' surname='Cardwell'>
         <organization>Google</organization>
      </author>
      <author fullname='Yuchung Cheng' initials='Y.' surname='Cheng'>
         <organization>Google</organization>
      </author>
      <author fullname='Soheil Hassas Yeganeh' initials='S. H.' surname='Yeganeh'>
         <organization>Google</organization>
      </author>
      <author fullname='Ian Swett' initials='I.' surname='Swett'>
         <organization>Google</organization>
      </author>
      <author fullname='Van Jacobson' initials='V.' surname='Jacobson'>
         <organization>Google</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies the BBR congestion control algorithm.  BBR
   (&quot;Bottleneck Bandwidth and Round-trip propagation time&quot;) uses recent
   measurements of a transport connection&#39;s delivery rate, round-trip
   time, and packet loss rate to build an explicit model of the network
   path.  BBR then uses this model to control both how fast it sends
   data and the maximum volume of data it allows in flight in the
   network at any time.  Relative to loss-based congestion control
   algorithms such as Reno [RFC5681] or CUBIC [RFC8312], BBR offers
   substantially higher throughput for bottlenecks with shallow buffers
   or random losses, and substantially lower queueing delays for
   bottlenecks with deep buffers (avoiding &quot;bufferbloat&quot;).  BBR can be
   implemented in any transport protocol that supports packet-delivery
   acknowledgment.  Thus far, open source implementations are available
   for TCP [RFC793] and QUIC [RFC9000].  This document specifies version
   2 of the BBR algorithm, also sometimes referred to as BBRv2 or bbr2.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-cardwell-iccrg-bbr-congestion-control-02'/>
   <format target='https://www.ietf.org/archive/id/draft-cardwell-iccrg-bbr-congestion-control-02.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

