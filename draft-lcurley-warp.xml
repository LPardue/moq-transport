<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-lcurley-warp-latest" category="info">

  <front>
    <title abbrev="WARP">Warp - Segmented Live Media Transport</title>

    <author initials="L." surname="Curley" fullname="Luke Curley">
      <organization>Twitch</organization>
      <address>
        <email>kixelated@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Pugin" fullname="Kirill Pugin">
      <organization>Meta</organization>
      <address>
        <email>ikir@meta.com</email>
      </address>
    </author>
    <author initials="S." surname="Nandakumar" fullname="Suhas Nandakumar">
      <organization>Cisco</organization>
      <address>
        <email>snandaku@cisco.com</email>
      </address>
    </author>

    <date />

    <area>General</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the core behavior for Warp, a segmented live media transport protocol.
Media is split into segments based on the underlying media encoding.
Each segment is transmitted independently over a QUIC stream.
QUIC streams are prioritized, allowing less important segments to be starved or dropped during congestion.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>Warp is a live media transport protocol that utilizes the QUIC network protocol <xref target="QUIC"/>.</t>

<t><xref target="motivation"/> covers the background and rationale behind Warp.
<xref target="segments"/> covers how media is encoded and split into segments.
<xref target="quic"/> covers how QUIC is used to transfer media.
<xref target="messages"/> covers how messages are encoded on the wire.</t>

<section anchor="terms-and-definitions" title="Terms and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Commonly used terms in this document are described below.</t>

<t><list style="hanging">
  <t hangText="Bitstream:">
  A continunous series of bytes.</t>
  <t hangText="Codec:">
  A compression algorithm for audio or video.</t>
  <t hangText="Congestion:">
  Packet loss and queuing caused by degraded or overloaded networks.</t>
  <t hangText="Consumer:">
  A QUIC endpoint receiving media over the network. This could be the media player or middleware.</t>
  <t hangText="Container:">
  A file format containing timestamps and the codec bitstream</t>
  <t hangText="Decoder:">
  A endpoint responsible for a deflating a compressed media stream into raw frames.</t>
  <t hangText="Decode Timestamp (DTS):">
  A timestamp indicating the order that frames/samples should be fed to the decoder.</t>
  <t hangText="Encoder:">
  A component responsible for creating a compressed media stream out of raw frames.</t>
  <t hangText="Frame:">
  An video image or group of audio samples to be rendered at a specific point in time.</t>
  <t hangText="I-frame:">
  A frame that does not depend on the contents of other frames; effectively an image.</t>
  <t hangText="Group of pictures (GoP):">
  A I-frame followed by a sequential series of dependent frames.</t>
  <t hangText="Group of samples:">
  A sequential series of audio samples starting at a given timestamp.</t>
  <t hangText="Player:">
  A component responsible for presenting frames to a viewer based on the presentation timestamp.</t>
  <t hangText="Presentation Timestamp (PTS):">
  A timestamp indicating when a frames/samples should be presented to the viewer.</t>
  <t hangText="Producer:">
  A QUIC endpoint sending media over the network. This could be the media encoder or middleware.</t>
  <t hangText="Rendition:">
  One or more tracks with the same content but different encodings.</t>
  <t hangText="Slice:">
  A section of a video frame. There may be multiple slices per frame.</t>
  <t hangText="Track:">
  An encoded bitstream, representing a single video/audio component that makes up the larger broadcast.</t>
</list></t>

</section>
</section>
<section anchor="motivation" title="Motivation">

<section anchor="latency" title="Latency">
<t>In a perfect world, we could deliver live media at the same rate it is produced.
The end-to-end latency of a broadcast would be fixed and only subject to encoding and transmission delays.
Unfortunately, networks have variable throughput, primarily due to congestion.</t>

<t>Attempting to deliver media larger than this variable network bitrate causes queuing.
This queuing can occur anywhere in the path between the encoder and decoder.
For example: the application, the OS socket, a wifi router, within an ISP, or generally anywhere in transit.</t>

<t>If nothing is done, new frames will be appended to the end of a growing queue and will take longer to arrive than their predecessors, increasing latency.
Our job is to minimize the growth of this queue, and failing that, skip the queue when possible.</t>

<t>Thus speed at which a media protocol can detect and respond to queuing determines the latency.
We can generally classify existing media protocols into two categories based on the underlying network protocol:</t>

<t><list style="symbols">
  <t>TCP-based media protocols (ex. RTMP, HLS, DASH) are popular due to their simplicity.
Media is served/consumed in decode order while any networking is handled by the TCP layer.
However, these protocols primarily see use at higher latency targets due to their relatively slow detection and response to queuing.</t>
  <t>UDP-based media protocols (ex. RTP, WebRTC, SRT) can side-step the issues with TCP and provide lower latency with better queue management.
However the media protocol is now responsible for fragmentation, congestion control, retransmissions, receiver feedback, reassembly, and more.
This added complexity significantly raises the implementation difficulty and hurts interoperability.</t>
</list></t>

<t>A goal of this draft is to get the best of both worlds: a simple protocol that can still rapidly detect and respond to congestion.
This is possible emergence of QUIC, designed to fix the shortcomings of TCP.
This draft relies on QUIC streams to deliver media segments in priority order during congestion.</t>

</section>
<section anchor="universal" title="Universal">
<t>The media protocol ecosystem is fragmented; each protocol has it's own niche.
Specialization is often a good thing, but we believe there's enough overlap to warrant consolidation.</t>

<t>For example, a service might simultaneously ingest via WebRTC, SRT, RTMP, and/or a custom UDP protocol depending on the broadcaster.
The same service might then simultaneously distribute via WebRTC, LL-HLS, HLS, (or the DASH variants) and/or a custom UDP protocol depending on the viewer.</t>

<t>These media protocols are radically different and not interoperable; requiring transcoding or transmuxing.
This cost is further increased by the need to maintain separate stacks with different expertise requirements.</t>

<t>A goal of this draft is to cover a large spectrum of use-cases. Specifically:</t>

<t><list style="symbols">
  <t>Consolidated contribution and distribution.
The primary difference between the two is the ability to fanout.
How does a CDN know how to forward media to N consumers and how does it reduce the encoded bitrate during congestion?
A single protocol can cover both use-cases provided intermediaries are informed on how to forward and drop media.</t>
  <t>A configurable latency versus quality trade-off.
The producer (broadcaster) chooses how to encode and transmit media based on the desired user experience.
Each consumer (viewer) chooses how long to wait for media based on their desired user experience and network.
We want an experience that can vary from real-time and lossy for one viewer, to delayed and loss-less for another viewer, without separate encodings or protocols.</t>
</list></t>

</section>
<section anchor="intermediaries" title="Intermediaries">
<t>The prevailing belief is that UDP-based protocols are more expensive and don't "scale".
While it's true that UDP is more difficult to optimize than TCP, QUIC itself is proof that it is is possible to reach performance parity.
In fact even some TCP-based protocols (ex. RTMP) don't "scale" either and are exclusively used for contribution as a result.</t>

<t>The truth is that the ability to scale a media protocol depends on intermediary support: proxies, caches, CDNs, SFUs, etc.
The success of HTTP-based media protocols is due to the ability to leverage traditional HTTP CDNs.</t>

<t>Meanwhile, it's difficult to build a CDN for media protocols that were not designed with intermediaries in mind.
For example, an intermediary has to parse the underlying codec to determine which RTP packets should be dropped first, and the decision is not deterministic or consistent for each hop.</t>

<t>A goal of this draft is to treat intermediaries as first class citizens.
Any identification, reliability, ordering, prioritization, caching, etc is written to the wire in header designed for intermediaries.
This ensures that intermediaries can easily route/fanout media to the final destination.
This also ensures that congestion response is consistent at every hop based on the preferences of the media producer.</t>

</section>
</section>
<section anchor="segments" title="Segments">
<t>Warp works by splitting media into segments that can be transferred over the network somewhat independently.</t>

<t><list style="symbols">
  <t>The encoder determines how to fragment the encoded bitstream into segments (<xref target="media"/>).</t>
  <t>Segments are assigned an intended delivery order that should be obeyed during congestion (<xref target="delivery-order"/>)</t>
  <t>The decoder receives each segment and skips any segments that do not arrive in time (<xref target="decoder"/>).</t>
</list></t>

<section anchor="media" title="Media">
<t>An encoder produces one or more codec bitstreams for each track.
The bitstreams are fed to the decoder on the other end, after being transported over the network, in the same order its produced.
The problem, as explained in motivation (<xref target="latency"/>), is that networks cannot sustain a continuous rate and thus queuing occurs.
See the appendix for an overview of media encoding (<xref target="appendix.encoding"/>).</t>

<t>Warp works by fragmenting the bitstream into segments that can be transmitted independently.
Depending on how the segments are fragmented, the decoder has the ability to safely drop media during congestion.
See the appendix for fragmentation examples (<xref target="appendix.examples"/>)</t>

<t>A segment:</t>

<t><list style="symbols">
  <t>MUST contain a single track.</t>
  <t>MUST be in decode order. This means an increasing DTS.</t>
  <t>MAY contain any number of frames/samples.</t>
  <t>MAY have gaps between frames/samples.</t>
  <t>MAY overlap with other segments. This means interleaved timestamps.</t>
  <t>MAY reference frames in other segments, but only if listed as a dependency.</t>
</list></t>

<t>Segments are encoded using fragmented MP4 <xref target="ISOBMFF"/>.
This is necessary to store timestamps and various metadata depending on the codec.
A future draft of Warp may specify other container formats.</t>

</section>
<section anchor="delivery-order" title="Delivery Order">
<t>Media is produced with an intended order, both in terms of when media should be presented (PTS) and when media should be decoded (DTS).
As stated in motivation (<xref target="latency"/>), the network is unable to maintain this ordering during congestion without increasing latency.</t>

<t>The encoder determines how to behave during congestion by assigning each segment a numeric delivery order.
The delivery order SHOULD be followed when possible to ensure that the most important media is delivered when throughput is limited.
Note that the contents within each segment are still delivered in order; this delivery order only applies to the ordering between segments.</t>

<t>A sender MUST send each segment over a dedicated QUIC stream.
The QUIC library should support prioritization (<xref target="prioritization"/>) such that streams are transmitted in delivery order.</t>

<t>A receiver MUST NOT assume that segments will be received in delivery order for a number of reasons:</t>

<t><list style="symbols">
  <t>Newly encoded segments MAY have a smaller delivery order than outstanding segments.</t>
  <t>Packet loss or flow control MAY delay the delivery of individual streams.</t>
  <t>The sender might not support QUIC stream prioritization.</t>
</list></t>

<t>A proxy MAY change the delivery order, in which case it SHOULD update the value on the wire for future hops.
This is NOT RECOMMENDED unless the proxy knows additional information about the media.
For example, a proxy could use the PTS as the delivery order to enable head-of-line blocking for content that should not be skipped, like an advertisement.</t>

</section>
<section anchor="decoder" title="Decoder">
<t>The decoder will receive multiple segments in parallel and out of order.</t>

<t>Segments arrive in delivery order, but media usually needs to be processed in decode order.
The decoder SHOULD use a buffer to reassmble segments into decode order and it SHOULD skip segments after a configurable duration.
The amount of time the decoder is willing to wait for a segment (buffer duration) is what ultimately determines the latency.</t>

<t>Segments MUST synchronize segments using presentation timestamps within the bitstream.
Segments are NOT REQUIRED to be aligned and the decoder MUST be prepared to skip over any gaps.</t>

</section>
</section>
<section anchor="quic" title="QUIC">

<section anchor="establishment" title="Establishment">
<t>A connection is established using WebTransport <xref target="WebTransport"/>.</t>

<t>To summarize:
The client issues a HTTP CONNECT request with the intention of establishing a new WebTransport session.
The server returns an 200 OK response if the WebTransport session has been established, or an error status otherwise.</t>

<t>A WebTransport session exposes the basic QUIC service abstractions.
Specifically, either endpoint may create independent streams which are reliably delivered in order until canceled.</t>

<t>WebTransport can currently operate via HTTP/3 and HTTP/2, using QUIC or TCP under the hood respectively.
As mentioned in the motivation (<xref target="motivation"/>) section, TCP introduces head-of-line blocking and will result in a worse experience.
It is RECOMMENDED to use WebTransport over HTTP/3.</t>

<t>The application SHOULD use the CONNECT request for authentication and negotiation.
For example, including a authentication token and some identifier in the path.
The application MAY use QUIC streams for more complicated behavior.</t>

</section>
<section anchor="streams" title="Streams">
<t>Warp endpoints communicate over unidirectional QUIC streams.
The application MAY use bidirectional QUIC streams for other purposes.</t>

<t>A stream consists of sequential messages.
See messages (<xref target="messages"/>) for the list of messages and their encoding.
These are similar to QUIC and HTTP/3 frames, but called messages to avoid the media terminology.</t>

<t>Each stream MUST start with a <spanx style="verb">HEADERS</spanx> message that indicates how the stream should be transmitted.</t>

<t>Messages SHOULD be sent over the same stream if ordering is desired.
For example, <spanx style="verb">PAUSE</spanx> and <spanx style="verb">PLAY</spanx> messages SHOULD be sent on the same stream to avoid a race.</t>

</section>
<section anchor="prioritization" title="Prioritization">
<t>Warp utilizes stream prioritization to deliver the most important content during congestion.</t>

<t>The encoder may assign a numeric delivery order to each stream (<xref target="delivery-order"/>)
This is a strict prioritization scheme, such that any available bandwidth is allocated to streams in ascending priority order.
The sender SHOULD prioritize streams based on the delivery order.
If two streams have the same delivery order, they SHOULD receive equal bandwidth (round-robin).</t>

<t>QUIC supports stream prioritization but does not standardize any mechanisms; see Section 2.3 in <xref target="QUIC"/>.
In order to support prioritization, a QUIC library MUST expose a API to set the priority of each stream.
This is easy to implement; the next QUIC packet should contain a STREAM frame for the next pending stream in priority order.
It is OPTIONAL to prioritize retransmissions within flow control limits.</t>

<t>The delivery order is written on the wire so it can be easily parsed by proxies.
A proxy SHOULD obey the stream priority.</t>

</section>
<section anchor="cancellation" title="Cancellation">
<t>QUIC streams can be canceled by either endpoint with an error code.</t>

<t>When using <spanx style="verb">order</spanx>, lower priority streams will be starved during congestion, perhaps indefinitely.
These streams will consume resources and flow control until they are canceled.
When nearing resource limits, an endpoint SHOULD cancel the lowest priority stream with error code 0.</t>

<t>When using <spanx style="verb">expires</spanx>, a stream SHOULD be canceled after the duration has elapsed.
This is not a full replacement for prioritization, but can provide some congestion response by clearing parts of the queue.</t>

</section>
<section anchor="congestion-control" title="Congestion Control">
<t>As covered in the motivation section (<xref target="motivation"/>), the ability to prioritize or cancel streams is a form of congestion response.
It's equally important to detect congestion via congestion control, which is handled in the QUIC layer <xref target="QUIC-RECOVERY"/>.</t>

<t>Bufferbloat is caused by routers queueing packets for an indefinite amount of time rather than drop them.
This latency significantly reduces the ability for the application to prioritize or drop media in response to congestion.
Senders SHOULD use a congestion control algorithm that reduces this bufferbloat (ex. <xref target="BBR"/>).
It is NOT RECOMMENDED to use a loss-based algorithm (ex. <xref target="NewReno"/>) unless the network fully supports ECN.</t>

<t>Live media is application-limited, which means that the encoder determines the max bitrate rather than the network.
Most TCP congestion control algorithms will only increase the congestion window if it is full, limiting the upwards mobility when application-limited.
Senders SHOULD use a congestion control algorithm that is designed for application-limited flows (ex. GCC).
Senders MAY periodically pad the connection with QUIC PING frames to fill the congestion window.</t>

</section>
<section anchor="termination" title="Termination">
<t>The QUIC connection can be terminated at any point with an error code.</t>

<t>The media producer MAY terminate the QUIC connection with an error code of 0 to indicate the clean termination of the broadcast.
The application SHOULD use a non-zero error code to indicate a fatal error.</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Reason</ttcol>
      <c>0x0</c>
      <c>Broadcast Terminated</c>
      <c>0x1</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

</section>
</section>
<section anchor="messages" title="Messages">
<t>Messages consist of a type identifier followed by contents, depending on the message type.</t>

<t>TODO document the encoding</t>

<texttable>
      <ttcol align='right'>ID</ttcol>
      <ttcol align='left'>Messages</ttcol>
      <c>0x0</c>
      <c>HEADERS <xref target="headers"/></c>
      <c>0x1</c>
      <c>SEGMENT <xref target="segment"/></c>
      <c>0x2</c>
      <c>APP <xref target="app"/></c>
      <c>0x10</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

<section anchor="headers" title="HEADERS">
<t>The <spanx style="verb">HEADERS</spanx> message contains information required to deliver, cache, and forward a stream.
This message SHOULD be parsed and obeyed by any Warp proxies.</t>

<t><list style="symbols">
  <t><spanx style="verb">id</spanx>.
An unique identifier for the stream.
This field is optional and MUST be unique if set.</t>
  <t><spanx style="verb">order</spanx>.
An numeric value indicating the delivery order (<xref target="delivery-order"/>).
A sender SHOULD transmit streams with smallest value first, as bandwidth permits.
If two streams use the same value, they SHOULD be round-robined.
Note that streams can still arrive out of the intended order due to packet loss.
This field is optional and the default value is 0.</t>
  <t><spanx style="verb">depends</spanx>.
An list of dependencies by stream identifier.
The decoder SHOULD process the specified dependencies first.
The decoder MAY support stream processing via the decode timestamp (DTS), such that it does not need to fully receive the dependency segments first.
The segment SHOULD have a larger <spanx style="verb">order</spanx> than its dependencies, if present.
This field is optional.</t>
</list></t>

<t>TODO use QPACK?</t>

</section>
<section anchor="segment" title="SEGMENT">
<t>A <spanx style="verb">SEGMENT</spanx> message consists of a segment in a fragmented MP4 container.</t>

<t>Each segment MUST start with an initialization fragment, or MUST depend on a segment with an initialization fragment.
An initialization fragment consists of a File Type Box (ftyp) followed by a Movie Box (moov).
This Movie Box (moov) consists of Movie Header Boxes (mvhd), Track Header Boxes (tkhd), Track Boxes (trak), followed by a final Movie Extends Box (mvex).
These boxes MUST NOT contain any samples and MUST have a duration of zero.
Note that a Common Media Application Format Header <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Each segment MAY have a Segment Type Box (styp) followed by any number of media fragments.
Each media fragment consists of a Movie Fragment Box (moof) followed by a Media Data Box (mdat).
The Media Fragment Box (moof) MUST contain a Movie Fragment Header Box (mfhd) and Track Box (trak) with a Track ID (<spanx style="verb">track_ID</spanx>) matching a Track Box in the initialization fragment.
Note that a Common Media Application Format Segment <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Media fragments can be packaged at any frequency, causing a trade-off between overhead and latency.
It is RECOMMENDED that a media fragment consists of a single frame to minimize latency.</t>

</section>
<section anchor="app" title="APP">
<t>The <spanx style="verb">APP</spanx> message contains arbitrary contents.</t>

</section>
<section anchor="goaway" title="GOAWAY">
<t>The <spanx style="verb">GOAWAY</spanx> message is sent by the server to force the client to reconnect.
This is useful for server maintenance or reassignments without severing the QUIC connection.
A server MAY use QUIC load balancing instead of a GOAWAY message.</t>

<t>The server:</t>

<t><list style="symbols">
  <t>MAY initiate a graceful shutdown by sending a GOAWAY message.</t>
  <t>MUST close the QUIC connection after a timeout with the GOAWAY error code (<xref target="termination"/>).</t>
  <t>MAY close the QUIC connection with a different error code if there is a fatal error before shutdown.</t>
  <t>SHOULD wait until the <spanx style="verb">GOAWAY</spanx> message and any pending streams have been fully acknowledged, plus an extra delay to ensure they have been processed.</t>
</list></t>

<t>The client:</t>

<t><list style="symbols">
  <t>MUST establish a new WebTransport session to the provided URL upon receipt of a <spanx style="verb">GOAWAY</spanx> message.</t>
  <t>SHOULD establish the connection in parallel which MUST use different QUIC connection.</t>
  <t>SHOULD remain connected for two servers for a short period, processing segments from both in parallel.</t>
</list></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>TODO</t>

<section anchor="resource-exhaustion" title="Resource Exhaustion">
<t>Live media requires significant bandwidth and resources.
Failure to set limits will quickly cause resource exhaustion.</t>

<t>Warp uses QUIC flow control to impose resource limits at the network layer.
Endpoints SHOULD set flow control limits based on the anticipated media bitrate.</t>

<t>The media producer prioritizes and transmits streams out of order.
Streams might be starved indefinitely during congestion and SHOULD be canceled after hitting some timeout or resource limit.</t>

<t>The media consumer might receive streams out of order.
If stream data is buffered, for example to decode segments in order, then the media consumer SHOULD cancel a stream after hitting some timeout or resource limit.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>TODO</t>

</section>
<section anchor="appendix.encoding" title="Appendix A. Video Encoding">
<t>In order to transport media, we first need to know how media is encoded.
This section is an overview of media encoding.</t>

<section anchor="tracks" title="Tracks">
<t>A broadcast consists of one or more tracks.
Each track has a type (audio, video, caption, etc) and uses a cooresponding codec.
There may be multiple tracks, including of the same type for a number of reasons.</t>

<t>For example:</t>

<t><list style="symbols">
  <t>A track for each codec.</t>
  <t>A track for each resolution and bitrate.</t>
  <t>A track for each language.</t>
  <t>A track for each camera feed.</t>
</list></t>

<t>Tracks can be muxed together into a single container or stream.
The goal of Warp is to independently deliver tracks, and even parts of a track, so this is not allowed.
Each Warp segment MUST contain a single track.</t>

</section>
<section anchor="appendix.init" title="Init">
<t>Media codecs have a wide array of configuration options.
For example, the resolution, the color space, the features enabled, etc.</t>

<t>Before playback can begin, the decoder needs to know how the configuration.
This is done via a short payload at the very start of the media file.
The initialization payload can be cached and reused between segments with the same configuration.</t>

</section>
<section anchor="appendix.video" title="Video">
<t>Video is a sequence of pictures (frames) with a presentation timestamp (PTS).</t>

<t>An I-frame is a frame with no dependencies and is effectively an image file.
These frames are usually inserted at a frequent interval to support seeking or joining a live stream.
However they can also improve compression when used at hard scene cuts.</t>

<t>A P-frame is a frame that references on one or more earlier frames.
These frames are delta-encoded, such that they only encode the changes (typically motion).
This result in a massive file size reduction for most content outside of few notorious cases (ex. confetti).</t>

<t>A common encoding structure is to only reference the previous frame, as it is simple and minimizes latency:</t>

<figure><artwork><![CDATA[
 I <- P <- P <- P   I <- P <- P <- P   I <- P ...
]]></artwork></figure>

<t>There is no such thing as an optimal encoding structure.
Encoders tuned for the best quality will produce a tangled spaghetti of references.
Encoders tuned for the lowest latency can avoid reference frames to allow more to be dropped.</t>

<section anchor="appendix.b-frame" title="B-Frames">
<t>The goal of video codecs is to maximize compression.
One of the improvements is to allow a frame to reference later frames.</t>

<t>A B-frame is a frame that can reference one or more frames in the future, and any number of frames in the past.
These frames are more difficult to encode/decode as they require buffering and reordering.</t>

<t>A common encoding structure is to use B-frames in a fixed pattern.
Such a fixed pattern is not optimal, but it's simpler for hardware encoding:</t>

<figure><artwork><![CDATA[
    B     B         B     B         B
   / \   / \       / \   / \       / \
  v   v v   v     v   v v   v     v   v
 I <-- P <-- P   I <-- P <-- P   I <-- P ...
]]></artwork></figure>

<t>The encoder outputs the bitstream in decode order, which means that each frame is output after its references.
This makes it easier for the decoder as all references are earlier in the bitstream and can be decoded immediately.</t>

<t>However, this causes problems with B-frames because they depend on a future frame, and some reordering has to occur.
In order to keep track of this, frames have a decode timestamp (DTS) in addition to a presentation timestamp (PTS).
A B-frame will have higher DTS value that its dependencies, while PTS and DTS will be the same for other frame types.</t>

<t>For the example above, this would look like:</t>

<figure><artwork><![CDATA[
PTS: I B P B P I B P B P B
DTS: I   PB  PBI   PB  PB
]]></artwork></figure>

<t>B-frames add latency because of this reordering so they are usually not used for conversational latency.</t>

</section>
<section anchor="appendix.gop" title="Group of Pictures">
<t>A group of pictures (GoP) is an I-frame followed by any number of frames until the next I-frame.
All frames MUST reference, either directly or indirectly, only the most recent I-frame.</t>

<figure><artwork><![CDATA[
        GoP               GoP            GoP
+-----------------+-----------------+---------------
|     B     B     |     B     B     |     B
|    / \   / \    |    / \   / \    |    / \
|   v   v v   v   |   v   v v   v   |   v   v
|  I <-- P <-- P  |  I <-- P <-- P  |  I <-- P ...
+-----------------+-----------------+--------------
]]></artwork></figure>

<t>This is a useful abstraction because GoPs can always be decoded independently.</t>

</section>
<section anchor="appendix.svc" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy.
This layered coding means that dropping the top layer degrades the user experience in a configured way.
Examples include reducing the resolution, picture quality, and/or frame rate.</t>

<t>Here is an example SVC encoding with 3 resolutions:</t>

<figure><artwork><![CDATA[
      +-------------------------+------------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P ...
      +-------------------------+------------------
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.audio" title="Audio">
<t>Audio is dramatically simpler than video as it is not typically delta encoded.
Audio samples are grouped together (group of samples) at a configured rate, also called a "frame".</t>

<t>The encoder spits out a continuous stream of samples (S):</t>

<figure><artwork><![CDATA[
S S S S S S S S S S S S S ...
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.examples" title="Appendix B. Segment Examples">
<t>Warp offers a large degree of flexability on how segments are fragmented and prioritized.
There is no best solution; it depends on the desired complexity and user experience.</t>

<t>This section provides a summary of some options available.</t>

<section anchor="video" title="Video">

<section anchor="group-of-pictures" title="Group of Pictures">
<t>A group of pictures (GoP) is consists of an I-frame and all frames that directly or indirectly reference it (<xref target="appendix.gop"/>).
The tail of a GoP can be dropped without causing decode errors, even if the encoding is otherwise unknown, making this the safest option.</t>

<t>It is RECOMMENDED that each segment consist of a single GoP.
For example:</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
]]></artwork></figure>

<t>Depending on the video encoding, this approach may introduce unnecessary ordering and dependencies.
A better option may be available below.</t>

</section>
<section anchor="scalable-video-coding" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy (<xref target="appendix.svc"/>).</t>

<t>When SVC is used, it is RECOMMENDED that each segment consist of a single layer and GoP.
For example:</t>

<figure><artwork><![CDATA[
               segment 3             segment 6
      +-------------------------+---------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 2             segment 5
      +-------------------------+---------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 1             segment 4
      +-------------------------+---------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P
      +-------------------------+---------------
]]></artwork></figure>

</section>
<section anchor="frames" title="Frames">
<t>With full knowledge of the encoding, the encoder MAY can split a GoP into multiple segments based on the frame.
However, this is highly dependent on the encoding, and the additional complexity might not improve the user experience.</t>

<t>For example, we could split our example B-frame structure (<xref target="appendix.b-frame"/>) into 13 segments:</t>

<figure><artwork><![CDATA[
      2     4           7     9           12
+--------+--------+--------+--------+-----------+
|     B  |  B     |     B  |  B     |     B     |
|-----+--+--+-----+-----+--+--+-----+-----+-----+
|  I  |  P  |  P  |  I  |  P  |  P  |  I  |  P  |
+-----+-----+-----+-----+-----+-----+-----+-----+
   1     3     5     6     8     10    11    13
]]></artwork></figure>

<t>To reduce the number of segments, segments can be merged with their dependency.
QUIC streams will deliver each segment in order so this produces the same result as reordering within the application.</t>

<t>The same GoP structure can be represented using eight segments:</t>

<figure><artwork><![CDATA[
      2     3           5     6           8
+--------+--------+-----------------+------------
|     B  |  B     |     B  |  B     |     B     |
+--------+--------+--------+--------+-----------+
|  I     P     P  |  I     P     P  |  I     P
+-----------------+-----------------+------------
         1                 4              7
]]></artwork></figure>

<t>We can further reduce the number of segments by combining frames that don't depend on each other.
The only restriction is that frames can only reference frames earlier in the segment, or within a dependency segment.
For example, non-reference frames can have their own segment so they can be prioritized or dropped separate from reference frames.</t>

<t>The same GoP structure can also be represented using six segments, although we've removed the ability to drop individual B-frames:</t>

<figure><artwork><![CDATA[
   segment 2     segment 4   segment 6
+-------------+-------------+---------
|    B   B    |    B   B    |    B
+-------------+-------------+---------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+---------
   segment 1     segment 3   segment 5
]]></artwork></figure>

</section>
<section anchor="init" title="Init">
<t>Initialization data (<xref target="appendix.init"/>) is required to initialize the decoder.
Each segment MAY start with initialization data although this adds overhead.</t>

<t>Instead, it is RECOMMENDED to create a init segment.
Each media segment can then depend on the init segment to avoid the redundant overhead.
For example:</t>

<figure><artwork><![CDATA[
    segment 2       segment 3    segment 5
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
|              init             |  init
+-------------------------------+---------
             segment 1           segment 4
]]></artwork></figure>

</section>
</section>
<section anchor="audio" title="Audio">
<t>Audio (<xref target="appendix.audio"/>) is much simpler than video so there's fewer options.</t>

<t>The simplest configuration is to use a single segment for each audio track.
This may seem inefficient given the ease of dropping audio samples.
However, the audio bitrate is low and gaps cause quite a poor user experience, when compared to video.</t>

<figure><artwork><![CDATA[
         segment 1
+---------------------------
| S S S S S S S S S S S S S
+---------------------------
]]></artwork></figure>

<t>An improvement is to periodically split audio samples into separate segments.
This gives the consumer the ability to skip ahead during severe congestion or temporary connectivity loss.</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
]]></artwork></figure>

<t>This frequency of audio segments is configurable, at the cost of additional overhead.
It's NOT RECOMMENDED to create a segment for each audio frame because of this overhead.</t>

<t>Since video can only recover from severe congestion with an I-frame, so there's not much point recovering audio at a separate interval.
It is RECOMMENDED to create a new audio segment at each video I-frame.</t>

<figure><artwork><![CDATA[
    segment 1       segment 3    segment 5
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
    segment 2       segment 4    segment 6
]]></artwork></figure>

</section>
<section anchor="appendix.delivery-order" title="Delivery Order">
<t>The delivery order (<xref target="delivery-order"/> depends on the desired user experience during congestion:</t>

<t><list style="symbols">
  <t>if media should be skipped: delivery order = PTS</t>
  <t>if media should not be skipped: delivery order = -PTS</t>
  <t>if video should be skipped before audio: audio delivery order &lt; video delivery order</t>
</list></t>

<t>The delivery order may be changed if the content changes.
For example, switching from a live stream (skippable) to an advertisement (unskippable).</t>

</section>
</section>
<section numbered="false" anchor="contributors" title="Contributors">

<t>TODO</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='QUIC' target='https://www.rfc-editor.org/info/rfc9000'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='M. Thomson' initials='M.' role='editor' surname='Thomson'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t></abstract>
</front>
<seriesInfo name='RFC' value='9000'/>
<seriesInfo name='DOI' value='10.17487/RFC9000'/>
</reference>



<reference anchor='QUIC-RECOVERY' target='https://www.rfc-editor.org/info/rfc9002'>
<front>
<title>QUIC Loss Detection and Congestion Control</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='I. Swett' initials='I.' role='editor' surname='Swett'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document describes loss detection and congestion control mechanisms for QUIC.</t></abstract>
</front>
<seriesInfo name='RFC' value='9002'/>
<seriesInfo name='DOI' value='10.17487/RFC9002'/>
</reference>


<reference anchor='WebTransport'>
   <front>
      <title>WebTransport over HTTP/3</title>
      <author fullname='Alan Frindell' initials='A.' surname='Frindell'>
         <organization>Facebook</organization>
      </author>
      <author fullname='Eric Kinnear' initials='E.' surname='Kinnear'>
         <organization>Apple Inc.</organization>
      </author>
      <author fullname='Victor Vasiliev' initials='V.' surname='Vasiliev'>
         <organization>Google</organization>
      </author>
      <date day='6' month='July' year='2022'/>
      <abstract>
	 <t>   WebTransport [OVERVIEW] is a protocol framework that enables clients
   constrained by the Web security model to communicate with a remote
   server using a secure multiplexed transport.  This document describes
   a WebTransport protocol that is based on HTTP/3 [HTTP3] and provides
   support for unidirectional streams, bidirectional streams and
   datagrams, all multiplexed within the same HTTP/3 connection.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-webtrans-http3-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-webtrans-http3-03.txt' type='TXT'/>
</reference>


<reference anchor="ISOBMFF" >
  <front>
    <title>Information technology â Coding of audio-visual objects â Part 12: ISO Base Media File Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="December"/>
  </front>
</reference>




<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CMAF" >
  <front>
    <title>Information technology -- Multimedia application format (MPEG-A) -- Part 19: Common media application format (CMAF) for segmented media</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020" month="March"/>
  </front>
</reference>




<reference anchor='NewReno' target='https://www.rfc-editor.org/info/rfc6582'>
<front>
<title>The NewReno Modification to TCP's Fast Recovery Algorithm</title>
<author fullname='T. Henderson' initials='T.' surname='Henderson'><organization/></author>
<author fullname='S. Floyd' initials='S.' surname='Floyd'><organization/></author>
<author fullname='A. Gurtov' initials='A.' surname='Gurtov'><organization/></author>
<author fullname='Y. Nishida' initials='Y.' surname='Nishida'><organization/></author>
<date month='April' year='2012'/>
<abstract><t>RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery.  RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to &quot;partial acknowledgments&quot; (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK.  This document describes a specific algorithm for responding to partial acknowledgments, referred to as &quot;NewReno&quot;.  This response to partial acknowledgments was first proposed by Janey Hoe.  This document obsoletes RFC 3782.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6582'/>
<seriesInfo name='DOI' value='10.17487/RFC6582'/>
</reference>


<reference anchor='BBR'>
   <front>
      <title>BBR Congestion Control</title>
      <author fullname='Neal Cardwell' initials='N.' surname='Cardwell'>
         <organization>Google</organization>
      </author>
      <author fullname='Yuchung Cheng' initials='Y.' surname='Cheng'>
         <organization>Google</organization>
      </author>
      <author fullname='Soheil Hassas Yeganeh' initials='S. H.' surname='Yeganeh'>
         <organization>Google</organization>
      </author>
      <author fullname='Ian Swett' initials='I.' surname='Swett'>
         <organization>Google</organization>
      </author>
      <author fullname='Van Jacobson' initials='V.' surname='Jacobson'>
         <organization>Google</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies the BBR congestion control algorithm.  BBR
   (&quot;Bottleneck Bandwidth and Round-trip propagation time&quot;) uses recent
   measurements of a transport connection&#39;s delivery rate, round-trip
   time, and packet loss rate to build an explicit model of the network
   path.  BBR then uses this model to control both how fast it sends
   data and the maximum volume of data it allows in flight in the
   network at any time.  Relative to loss-based congestion control
   algorithms such as Reno [RFC5681] or CUBIC [RFC8312], BBR offers
   substantially higher throughput for bottlenecks with shallow buffers
   or random losses, and substantially lower queueing delays for
   bottlenecks with deep buffers (avoiding &quot;bufferbloat&quot;).  BBR can be
   implemented in any transport protocol that supports packet-delivery
   acknowledgment.  Thus far, open source implementations are available
   for TCP [RFC793] and QUIC [RFC9000].  This document specifies version
   2 of the BBR algorithm, also sometimes referred to as BBRv2 or bbr2.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-cardwell-iccrg-bbr-congestion-control-02'/>
   <format target='https://www.ietf.org/archive/id/draft-cardwell-iccrg-bbr-congestion-control-02.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

