<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-lcurley-warp-latest" category="info">

  <front>
    <title abbrev="WARP">Warp - Layered Live Media Transport</title>

    <author initials="L." surname="Curley" fullname="Luke Curley">
      <organization>Twitch</organization>
      <address>
        <email>kixelated@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Pugin" fullname="Kirill Pugin">
      <organization>Meta</organization>
      <address>
        <email>ikir@meta.com</email>
      </address>
    </author>
    <author initials="S." surname="Nandakumar" fullname="Suhas Nandakumar">
      <organization>Cisco</organization>
      <address>
        <email>snandaku@cisco.com</email>
      </address>
    </author>

    <date />

    <area>General</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the core behavior for Warp, a layered live media transport protocol.
Media is split into layers based on the underlying media encoding.
Each layer is transmitted independently over a QUIC stream.
QUIC streams are prioritized, allowing less important layers to be starved or dropped during congestion.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>Warp is a live media transport protocol that utilizes the QUIC network protocol <xref target="QUIC"/>.</t>

<t><xref target="motivation"/> covers the background and rationale behind Warp.
<xref target="layers"/> covers how media is encoded and split into layers.
<xref target="quic"/> covers how QUIC is used to transfer media.
<xref target="messages"/> covers how messages are encoded on the wire.</t>

<section anchor="terms-and-definitions" title="Terms and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Commonly used terms in this document are described below.</t>

<t>TODO definitions</t>

</section>
</section>
<section anchor="motivation" title="Motivation">

<section anchor="latency" title="Latency">
<t>In a perfect world, we could deliver live media at the same rate it is produced.
The end-to-end latency of a broadcast would be fixed and only subject to encoding and transmission delays.
Unfortunately, networks have variable throughput, primarily due to congestion.</t>

<t>Attempting to deliver media larger than this variable network bitrate causes queuing.
This queuing can occur anywhere in the path between the encoder and decoder.
For example: the application, the OS socket, a wifi router, within an ISP, or generally anywhere in transit.</t>

<t>If nothing is done, new frames will be appended to the end of a growing queue and will take longer to arrive than their predecessors, increasing latency.
Our job is to minimize the growth of this queue, and failing that, skip the queue when possible.</t>

<t>Thus speed at which a media protocol can detect and respond to queuing determines the latency.
We can generally classify existing media protocols into two categories based on the underlying network protocol:</t>

<t><list style="symbols">
  <t>TCP-based media protocols (ex. RTMP, HLS, DASH) are popular due to their simplicity.
Media is served/consumed in decode order while any networking is handled by the TCP layer.
However, these protocols primarily see use at higher latency targets due to their relatively slow detection and response to queuing.</t>
  <t>UDP-based media protocols (ex. RTP, WebRTC, SRT) can side-step the issues with TCP and provide lower latency with better queue management.
However the media protocol is now responsible for fragmentation, congestion control, retransmissions, receiver feedback, reassembly, and more.
This added complexity significantly raises the implementation difficulty and hurts interoperability.</t>
</list></t>

<t>A goal of this draft is to get the best of both worlds: a simple protocol that can still rapidly detect and respond to congestion.
This is possible emergence of QUIC, designed to fix the shortcomings of TCP.
This draft relies on QUIC streams to deliver media layers in priority order during congestion.</t>

</section>
<section anchor="universal" title="Universal">
<t>The media protocol ecosystem is fragmented; each protocol has it's own niche.
Specialization is often a good thing, but we believe there's enough overlap to warrant consolidation.</t>

<t>For example, a service might simultaneously ingest via WebRTC, SRT, RTMP, and/or a custom UDP protocol depending on the broadcaster.
The same service might then simultaneously distribute via WebRTC, LL-HLS, HLS, (or the DASH variants) and/or a custom UDP protocol depending on the viewer.</t>

<t>These media protocols are radically different and not interoperable; requiring transcoding or transmuxing.
This cost is further increased by the need to maintain separate stacks with different expertise requirements.</t>

<t>A goal of this draft is to cover a large spectrum of use-cases. Specifically:</t>

<t><list style="symbols">
  <t>Consolidated contribution and distribution.
The primary difference between the two is the ability to fanout.
How does a CDN know how to forward media to N consumers and how does it reduce the encoded bitrate during congestion?
A single protocol can cover both use-cases provided intermediaries are informed on how to forward and drop media.</t>
  <t>A configurable latency versus quality trade-off.
The producer (broadcaster) chooses how to encode and transmit media based on the desired user experience.
Each consumer (viewer) chooses how long to wait for media based on their desired user experience and network.
We want an experience that can vary from real-time and lossy for one viewer, to delayed and loss-less for another viewer, without separate encodings or protocols.</t>
</list></t>

</section>
<section anchor="intermediaries" title="Intermediaries">
<t>The prevailing belief is that UDP-based protocols are more expensive and don't "scale".
While it's true that UDP is more difficult to optimize than TCP, QUIC itself is proof that it is is possible to reach performance parity.
In fact even some TCP-based protocols (ex. RTMP) don't "scale" either and are exclusively used for contribution as a result.</t>

<t>The truth is that the ability to scale a media protocol depends on intermediary support: proxies, caches, CDNs, SFUs, etc.
The success of HTTP-based media protocols is due to the ability to leverage traditional HTTP CDNs.</t>

<t>Meanwhile, it's difficult to build a CDN for media protocols that were not designed with intermediaries in mind.
For example, an intermediary has to parse the underlying codec to determine which RTP packets should be dropped first, and the decision is not deterministic or consistent for each hop.</t>

<t>A goal of this draft is to treat intermediaries as first class citizens.
Any identification, reliability, ordering, prioritization, caching, etc is written to the wire in header designed for intermediaries.
This ensures that intermediaries can easily route/fanout media to the final destination.
This also ensures that congestion response is consistent at every hop based on the preferences of the media producer.</t>

</section>
</section>
<section anchor="layers" title="Layers">
<t>Warp is based on the concept of layered coding.
A layer is a combination of a media bitstream and a set of properties.</t>

<t><list style="symbols">
  <t>The encoder determines how to split the encoded bitstream into layers (<xref target="media"/>).</t>
  <t>Each layer is transferred over a QUIC stream, which are delivered independently according to the layer properties (<xref target="properties"/>).</t>
  <t>The decoder receives each layer and skips any layers that do not arrive in time (<xref target="decoder"/>).</t>
</list></t>

<section anchor="media" title="Media">
<t>An encoder produces one or more codec bitstreams for each track.
The bitstream is then fed to the decoder on the other end, after being transported over the network, in the same order its produced.
The problem, as explained in motivation (<xref target="latency"/>), is that networks cannot sustain a continuous rate and thus queuing occurs.</t>

<t>Warp works by splitting the codec bitstream into layers that can be transmitted independently.
The producer determines how to split the bistream into layers: based on the track, GoP, frame/sample, or even slice.
Depending on how the layers are produced, the consumer has the ability to decode layers out of order and skip over gaps.
See the appendix for examples based on media encoding (<xref target="appendix.examples"/>).</t>

<t>TOOD specify CMAF</t>

<t>A layer MUST contain a single track.
A layer MAY contain any number of samples which MUST be in decode order (increasing DTS).
There MAY be gaps between samples, as specified by the presentation timestamp and duration within the container.</t>

<t>The goal of layers is to produce a hierarchy.
Layers MAY depend on any number of other layers and MAY overlap with other layers.</t>

</section>
<section anchor="properties" title="Properties">
<t>Each layer has properties to go along with its contents.
These are written on the wire and inform how they layer should be transmitted at each hop.
This is primarily for the purpose of supporting intermediaries, but some of this information may also be used by the decoder.</t>

<t>All currently defined properties are optional.</t>

<t><list style="symbols">
  <t><spanx style="verb">id</spanx>.
A numeric identifier for the layer.
If non-zero, this value MUST be unique.
The default value is 0.</t>
  <t><spanx style="verb">order</spanx>.
A numeric priority such that the smaller values take priority.
A sender SHOULD transmit layers with smallest value first, effectively starving layers with larger values during congestion.
If two layers use the same value, they SHOULD be round-robined.
Note that layers can still arrive out of the intended order due to packet loss.
The default value is 0.</t>
  <t><spanx style="verb">depends</spanx>.
A list of numeric layer IDs.
This informs the decoder that it MUST receive and process the dependency layers first.
The decoder MAY support stream processing, such that it does not need to fully receive the dependency layers first.
The layer SHOULD have a larger <spanx style="verb">order</spanx> than its dependencies, if present.
The default value is 0, which means no dependency.</t>
  <t><spanx style="verb">cache</spanx>.
TODO Indicates the layer should be cached for some amount of time since last access. What about fragments with an unbounded age? Should we send an <spanx style="verb">expire</spanx> message instead?</t>
  <t><spanx style="verb">expires</spanx>.
TODO Indicates the layer should be dropped after some amount of time (ex. <spanx style="verb">RESET_STREAM</spanx>). Do we need clock sync for this? How does this interact with <spanx style="verb">cache</spanx>?</t>
  <t><spanx style="verb">timestamp</spanx>.
TODO The presentation timestamp of the earliest (not always first) frame in the layer. What does an intermediary need this for?</t>
  <t><spanx style="verb">track</spanx>
TODO The track identifier to be used in conjunction with the TRACK message.</t>
</list></t>

<t>See the appendix for some example layers and properties. <xref target="appendix.examples"/></t>

</section>
<section anchor="decoder" title="Decoder">
<t>The consumer will receive multiple layers over the network in parallel.
The decoder MUST synchronize layers using presentation timestamps within the bitstream.
The decoder might not support decoding each layer independently, so the consumer MAY need to reorder prior to passing a bitstream to the decoder.</t>

<t>Layers are NOT REQUIRED to be aligned within or between tracks.
For example, a low quality rendition may have more frequent I-frames, and thus layers, than a higher quality rendition.
A decoder MUST be prepared to skip over any gaps between layers.</t>

</section>
</section>
<section anchor="quic" title="QUIC">

<section anchor="establishment" title="Establishment">
<t>A connection is established using WebTransport <xref target="WebTransport"/>.</t>

<t>To summarize:
The client issues a HTTP CONNECT request with the intention of establishing a new WebTransport session.
The server returns an 200 OK response if the WebTransport session has been established, or an error status otherwise.</t>

<t>A WebTransport session exposes the basic QUIC service abstractions.
Specifically, either endpoint may create independent streams which are reliably delivered in order until canceled.</t>

<t>WebTransport can currently operate via HTTP/3 and HTTP/2, using QUIC or TCP under the hood respectively.
As mentioned in the motivation (<xref target="motivation"/>) section, TCP introduces head-of-line blocking and will result in a worse experience.
It is RECOMMENDED to use WebTransport over HTTP/3.</t>

<t>The application SHOULD use the CONNECT request for authentication and negotiation.
For example, including a authentication token and some identifier in the path.
The application MAY use QUIC streams for more complicated behavior.</t>

<t>TODO define auth inside the protocol?</t>

</section>
<section anchor="streams" title="Streams">
<t>Warp endpoints communicate over unidirectional QUIC streams.
The application MAY use bidirectional QUIC streams for other purposes.</t>

<t>A stream consists of sequential messages.
See messages (<xref target="messages"/>) for the list of messages and their encoding.
These are similar to QUIC and HTTP/3 frames, but called messages to avoid the media terminology.</t>

<t>Each stream MUST start with a <spanx style="verb">HEADERS</spanx> message. TODO better name.
This message includes information on how intermediaries should proxy or cache the stream.
If a stream is used to transmit a layer, the header MUST match the layer properties (<xref target="properties"/>).</t>

<t>Messages SHOULD be sent over the same stream if ordering is desired.
For example, <spanx style="verb">PAUSE</spanx> and <spanx style="verb">PLAY</spanx> messages SHOULD be sent on the same stream to avoid a race.</t>

</section>
<section anchor="prioritization" title="Prioritization">
<t>Warp utilizes stream prioritization to deliver the most important content during congestion.</t>

<t>The media producer SHOULD assign a numeric order to each stream, as contained in the HEADERS message (<xref target="headers"/>).
This is a strict prioritization scheme, such that any available bandwidth is allocated to streams in ascending order.
The order is determined at encode, written to the wire so it can be read by intermediaries, and will not be updated.
This effectively creates a priority queue that can be maintained over multiple hops.</t>

<t>QUIC supports stream prioritization but does not standardize any mechanisms; see Section 2.3 in <xref target="QUIC"/>.
QUIC libraries will need to expose a API to the application to set the priority of each stream.</t>

<t>Senders SHOULD support prioritized streams, although it is OPTIONAL on a path with no expected congestion.
Senders SHOULD use strict ordering, although relative weights MAY be acceptable if there are no other options.
Senders MUST obey the order as written to the wire.
Senders MAY choose to delay retransmitting lower priority streams when possible within QUIC flow control limits.</t>

</section>
<section anchor="cancellation" title="Cancellation">
<t>QUIC streams can be canceled by either endpoint with an error code.</t>

<t>When using <spanx style="verb">order</spanx>, lower priority streams will be starved during congestion, perhaps indefinitely.
These streams will consume resources and flow control until they are canceled.
When nearing resource limits, an endpoint SHOULD cancel the lowest priority stream with error code 0.</t>

<t>When using <spanx style="verb">expires</spanx>, a stream SHOULD be canceled after the duration has elapsed.
This is not a full replacement for prioritization, but can provide some congestion response by clearing parts of the queue.</t>

</section>
<section anchor="congestion-control" title="Congestion Control">
<t>As covered in the motivation section (<xref target="motivation"/>), the ability to prioritize or cancel streams is a form of congestion response.
It's equally important to detect congestion via congestion control, which is handled in the QUIC layer.</t>

<t>Bufferbloat is caused by routers queueing packets for an indefinite amount of time rather than drop them.
This latency significantly reduces the ability for the application to prioritize or drop media in response to congestion.
Senders SHOULD use a congestion control algorithm that reduces this bufferbloat.
It is NOT RECOMMENDED to use a loss-based algorithm (ex. Reno, CUBIC) unless the network fully supports ECN.</t>

<t>Live media is application-limited, which means that the encoder determines the max bitrate rather than the network.
Most TCP congestion control algorithms will only increase the congestion window if it is full, limiting the upwards mobility when application-limited.
Senders SHOULD use a congestion control algorithm that is designed for application-limited flows (ex. GCC).
Senders MAY periodically pad the connection with QUIC PING frames to fill the congestion window.</t>

</section>
<section anchor="termination" title="Termination">
<t>The QUIC connection can be terminated at any point with an error code.</t>

<t>The media producer MAY terminate the QUIC connection with an error code of 0 to indicate the clean termination of the broadcast.
The application SHOULD use a non-zero error code to indicate a fatal error.</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Reason</ttcol>
      <c>0x0</c>
      <c>Broadcast Terminated</c>
      <c>0x1</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

<t>TODO define more error codes</t>

</section>
</section>
<section anchor="messages" title="Messages">
<t>Messages consist of a type identifier followed by contents, depending on the message type.</t>

<t>TODO document varint identifier
TODO more message types</t>

<texttable>
      <ttcol align='right'>ID</ttcol>
      <ttcol align='left'>Messages</ttcol>
      <c>0x0</c>
      <c>HEADERS <xref target="headers"/></c>
      <c>0x1</c>
      <c>LAYER <xref target="layer"/></c>
      <c>0x2</c>
      <c>APP <xref target="app"/></c>
      <c>0x10</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

<section anchor="headers" title="HEADERS">
<t>The <spanx style="verb">HEADERS</spanx> message contains the information listed in layer properties (<xref target="properties"/>).</t>

<t>TODO better name
TODO document wire format
TODO use QPACK?</t>

</section>
<section anchor="layer" title="LAYER">
<t>A <spanx style="verb">LAYER</spanx> message consists of the layer bitstream.
A <spanx style="verb">LAYER</spanx> message must be proceeded with a <spanx style="verb">HEADERS</spanx> message specifying the layer properties (<xref target="properties"/>).</t>

<t>TODO document CMAF
TODO document wire format
TODO support multiple container formats</t>

</section>
<section anchor="app" title="APP">
<t>The <spanx style="verb">APP</spanx> message contains arbitrary contents.
A stream containing <spanx style="verb">APP</spanx> message SHOULD be cached and forwarded by intermediaries like any other stream; based on the <spanx style="verb">HEADERS</spanx> message (<xref target="headers"/>).</t>

<t>TODO document wire format</t>

</section>
<section anchor="goaway" title="GOAWAY">
<t>The <spanx style="verb">GOAWAY</spanx> message is sent by the server to force the client to reconnect.
This is useful for server maintenance or reassignments without severing the QUIC connection.
A server MAY use QUIC load balancing instead of a GOAWAY message.</t>

<t>The server initiates the graceful shutdown by sending a GOAWAY message.
The server MUST close the QUIC connection after a timeout with the GOAWAY error code (<xref target="termination"/>).
The server MAY close the QUIC connection with a different error code if there is a fatal error before shutdown.
The server SHOULD wait until the <spanx style="verb">GOAWAY</spanx> message and any pending streams have been fully acknowledged, plus an extra delay to ensure they have been processed.</t>

<t>A client that receives a <spanx style="verb">GOAWAY</spanx> message should establish a new WebTransport session to the provided URL.
This session SHOULD be made in parallel and MUST use a different QUIC connection (not pooled).
The optimal client will be connected for two servers for a short period, potentially receiving layers from both in parallel.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>TODO expand</t>

<section anchor="resource-exhaustion" title="Resource Exhaustion">
<t>Live media requires significant bandwidth and resources.
Failure to set limits will quickly cause resource exhaustion.</t>

<t>Warp uses QUIC flow control to impose resource limits at the network layer.
Endpoints SHOULD set flow control limits based on the anticipated media bitrate.</t>

<t>The media producer prioritizes and transmits streams out of order.
Streams might be starved indefinitely during congestion and SHOULD be canceled after hitting some timeout or resource limit.</t>

<t>The media consumer might receive streams out of order.
If stream data is buffered, for example to decode segments in order, then the media consumer SHOULD cancel a stream after hitting some timeout or resource limit.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>TODO</t>

</section>
<section anchor="appendix.examples" title="Appendix A. Layer Examples">
<t>Warp offers a large degree of flexability on how layers are fragmented and prioritized.
There is no best solution; it depends on the desired complexity and user experience.</t>

<t>This section provides a summary of media encoding and some options available.</t>

<section anchor="recommended" title="Recommended">
<t>Before explaining all of the options, there is a recommended approach:</t>

<t><list style="symbols">
  <t>a video layer per GoP (<xref target="appendix.gop"/>)</t>
  <t>an audio layer at roughly the same timestamp (<xref target="appendix.segments"/>)</t>
</list></t>

<t>TODO section on prioritization
* audio should be delivered before video
* for new media should be delivered before old media, or the opposite if reliability is desired</t>

</section>
<section anchor="tracks" title="Tracks">
<t>A broadcast consists of one or more tracks.
Each track has a type (audio, video, caption, etc) and uses a cooresponding codec.
There may be multiple tracks, including of the same type for a number of reasons.</t>

<t>For example:</t>

<t><list style="symbols">
  <t>A track for each codec.</t>
  <t>A track for each resolution and bitrate.</t>
  <t>A track for each language.</t>
  <t>A track for each camera feed.</t>
</list></t>

<t>Traditionally, these tracks could be muxed together into a single container or stream.
The goal of Warp is to independently deliver tracks, and even parts of a track, so they must be demuxed.</t>

<t>The simplest configuration is a single, continuous layer per track.
This allows tracks to be prioritized during congestion, although no media can be dropped.
The next section covers how to further split layers based on the type of media.</t>

</section>
<section anchor="video" title="Video">

<section anchor="encoding" title="Encoding">
<t>Video is a sequence of frames with a display timestamp.
To improve compression, frames are encoded as deltas and can reference number of frames in the past (P-frames) and/or in the future (B-frames).
A frame with no dependencies (I-frame) is effectively an image file and is a seek point.</t>

<t>A common encoding structure is to only reference the previous frame, as it is simple and minimizes latency:</t>

<figure><artwork><![CDATA[
 I <- P <- P <- P   I <- P <- P <- P   I <- P ...
]]></artwork></figure>

<t>Another common encoding structure is to use B-frames in a fixed pattern, which is easier for hardware encoding.
B-frames reference one or more future frames, which improves the compression ratio but increases latency.</t>

<t>This example is referenced in later sections:</t>

<figure><artwork><![CDATA[
    B     B         B     B         B
   / \   / \       / \   / \       / \
  /   \ /   \     /   \ /   \     /   \
 I <-- P <-- P   I <-- P <-- P   I <-- P ...
]]></artwork></figure>

<t>Note that the B-frames reference I and P frames in this example, despite the lack of an arrow.
TODO better ASCII art</t>

<t>There is no such thing as an optimal encoding structure.
Encoders tuned for the best quality will produce a tangled spaghetti of references.
Encoders tuned for the lowest latency still have a lot of options for references.</t>

</section>
<section anchor="decode-order" title="Decode Order">
<t>The encoder outputs the bitstream in decode order, which means that each frame is output after its dependencies.
This is only relevant for B-frames as they must be buffered until the frame they reference has been flushed.</t>

<t>A layer MUST be in decode order.</t>

<t>For the example above, this would look like:</t>

<figure><artwork><![CDATA[
encode order: I B P B P I B P B P I B P ..
decode order: I P B P B I P B P B I P B ..
]]></artwork></figure>

</section>
<section anchor="appendix.gop" title="Group of Pictures">
<t>A group of pictures (GoP) is consists of an I-frame and the frames that directly or indirectly reference it.
Each GoP can be decoded independently and thus can be transmitted independently.
It is also safe to drop the tail of the GoP (in decode order) without causing decode errors.</t>

<t>A layer MAY consist of an entire GoP.
A layer MAY consist of multiple sequential GoPs.</t>

<t>Our example GoP structure would be split into three layers.</t>

<figure><artwork><![CDATA[
     layer 1         layer 2      layer 3
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
]]></artwork></figure>

</section>
<section anchor="scalable-video-coding" title="Scalable Video Coding">
<t>The concept of layers is borrowed from scalable video coding (SVC).
When SVC is enabled, the encoder produces multiple bitstreams in a hierarchy.
Dropping the top layer degrades the user experience in a configured way, such as reducing the resolution, picture quality, and/or frame rate.</t>

<t>A layer MAY consist of an entire SVC layer.</t>

<t>Our example GoP structure would be split into six layers, assuming the B frames are part of a SVC layer:</t>

<figure><artwork><![CDATA[
    layer 2       layer 4     layer 6
+-------------+-------------+--------
|    B   B    |    B   B    |    B
+-------------+-------------+--------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+--------
    layer 1       layer 3     layer 5
]]></artwork></figure>

<t>Note that SVC encoding is more complicated than this; our example is a simple temporal encoding scheme.</t>

</section>
<section anchor="frames" title="Frames">
<t>With full knowledge of the encoding, the producer can split a GoP into multiple layers based on the frame.
However, this is highly dependent on the encoding, and the additional complexity might not improve the user experience.</t>

<t>A layer MAY consist of a single frame.</t>

<t>Our example GoP structure could be split into thirteen layers:</t>

<figure><artwork><![CDATA[
      2     4           7     9           12
+--------+--------+--------+--------+-----------+
|     B  |  B     |     B  |  B     |     B     |
|-----+--+--+-----+-----+--+--+-----+-----+-----+
|  I  |  P  |  P  |  I  |  P  |  P  |  I  |  P  |
+-----+-----+-----+-----+-----+-----+-----+-----+
   1     3     5     6     8     10    11    13
]]></artwork></figure>

<t>To reduce the number of layers, frames can be appended to a layer they depend on.
Layers are delivered in order so this is simpler and produces the same user experience.</t>

<t>A layer MAY consist of multiple frames within the same GoP.</t>

<t>The same GoP structure can be represented using eight layers:</t>

<figure><artwork><![CDATA[
      2     3           5     6           8
+--------+--------+-----------------+------------
|     B  |  B     |     B  |  B     |     B     |
+--------+--------+--------+--------+-----------+
|  I     P     P  |  I     P     P  |  I     P
+-----------------+-----------------+------------
         1                 4              7
]]></artwork></figure>

<t>We can further reduce the number of layers by combining some frames that don't depend on each other.
The only restriction is that frames can only reference frames earlier in the layer, or within a dependency layer.
For example, non-reference frames can have their own layer so they can be prioritized or dropped separate from reference frames.</t>

<t>The same GoP structure can also be represented using six layers, although we've removed our ability to drop individual B-frames:</t>

<figure><artwork><![CDATA[
    layer 2       layer 4     layer 6
+-------------+-------------+--------
|    B   B    |    B   B    |    B
+-------------+-------------+--------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+--------
    layer 1       layer 3     layer 5
]]></artwork></figure>

<t>Note that this is identical to our SVC example; we've effectively implemented our own temporal coding scheme.</t>

</section>
<section anchor="slices" title="Slices">
<t>Frames actually consist of multiple slices that reference other slices.
It's conceptually simpler to work with frames instead of slices, but splitting slices into layers may be useful.
For example, intra-refresh splits an I-frame into multiple I-slices (TODO terminology) and spread over multiple frames to smooth out the bitrate.
TODO are slices necessary?</t>

<t>A layer MAY consist of a single slice.
A layer MAY consist of multiple slices that are part of the same GoP.</t>

</section>
<section anchor="init" title="Init">
<t>For the most byte-conscious applications, initialization data can be sent over its own layer.
Multiple layers can depend on this initialization layer to avoid redundant transmissions.
For example: this is the init segment in CMAF (<spanx style="verb">moov</spanx> with no samples), which contains the SPS/PPS NALUs for h.264.</t>

<t>A layer MAY consist of no samples.</t>

<t>Our example layer per GoP would have an extra layer added:</t>

<figure><artwork><![CDATA[
     layer 2         layer 3      layer 4
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
|                     init
+-----------------------------------------
                     layer 1
]]></artwork></figure>

<t>An initialization layer MUST be cached in memory until it expires.
TODO How do we do this?</t>

</section>
</section>
<section anchor="audio" title="Audio">

<section anchor="encoding-1" title="Encoding">
<t>Audio is dramatically simpler than video as it is not typically not delta encoded.
Audio samples are grouped together (group of samples) at a configured rate, also called a "frame".</t>

<t>In the below diagrams, each audio frame is denoted with an S.
The encoder spits out a continuous stream of samples:</t>

<figure><artwork><![CDATA[
S S S S S S S S S S S S S
]]></artwork></figure>

</section>
<section anchor="simple" title="Simple">
<t>The simplest configuration is to use a single layer for each audio track.
This may seem inefficient given the ease of dropping audio samples.
However, the audio bitrate is low and gaps cause quite a poor user experience, when compared to video.</t>

<t>A layer SHOULD consist of multiple audio frames.</t>

<figure><artwork><![CDATA[
          layer 1
+---------------------------
| S S S S S S S S S S S S S
+---------------------------
]]></artwork></figure>

</section>
<section anchor="periodic-refresh" title="Periodic Refresh">
<t>An improvement is to periodically split audio samples into separate layers.
This gives the consumer the ability to skip ahead during severe congestion or temporary connectivity loss.</t>

<figure><artwork><![CDATA[
     layer 1         layer 2      layer 3
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
]]></artwork></figure>

<t>This frequency of audio layers is configurable, at the cost of additional overhead.
It's NOT RECOMMENDED to create a layer for each audio frame because of this overhead.</t>

</section>
<section anchor="appendix.segments" title="Segments">
<t>Video can only recover from severe congestion with an I-frame, so there's not much point recovering audio at a separate interval.
It is RECOMMENDED to create a new audio layer at each video I-frame.</t>

<figure><artwork><![CDATA[
     layer 1         layer 3      layer 5
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
     layer 2         layer 4      layer 6
]]></artwork></figure>

<t>This is effectively how HLS/DASH segments work, with the exception that the most recent layers are still pending.</t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='QUIC' target='https://www.rfc-editor.org/info/rfc9000'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='M. Thomson' initials='M.' role='editor' surname='Thomson'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t></abstract>
</front>
<seriesInfo name='RFC' value='9000'/>
<seriesInfo name='DOI' value='10.17487/RFC9000'/>
</reference>



<reference anchor='QUIC-RECOVERY' target='https://www.rfc-editor.org/info/rfc9002'>
<front>
<title>QUIC Loss Detection and Congestion Control</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='I. Swett' initials='I.' role='editor' surname='Swett'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document describes loss detection and congestion control mechanisms for QUIC.</t></abstract>
</front>
<seriesInfo name='RFC' value='9002'/>
<seriesInfo name='DOI' value='10.17487/RFC9002'/>
</reference>


<reference anchor='WebTransport'>
   <front>
      <title>WebTransport over HTTP/3</title>
      <author fullname='Alan Frindell' initials='A.' surname='Frindell'>
         <organization>Facebook</organization>
      </author>
      <author fullname='Eric Kinnear' initials='E.' surname='Kinnear'>
         <organization>Apple Inc.</organization>
      </author>
      <author fullname='Victor Vasiliev' initials='V.' surname='Vasiliev'>
         <organization>Google</organization>
      </author>
      <date day='6' month='July' year='2022'/>
      <abstract>
	 <t>   WebTransport [OVERVIEW] is a protocol framework that enables clients
   constrained by the Web security model to communicate with a remote
   server using a secure multiplexed transport.  This document describes
   a WebTransport protocol that is based on HTTP/3 [HTTP3] and provides
   support for unidirectional streams, bidirectional streams and
   datagrams, all multiplexed within the same HTTP/3 connection.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-webtrans-http3-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-webtrans-http3-03.txt' type='TXT'/>
</reference>


<reference anchor="ISOBMFF" >
  <front>
    <title>Information technology â Coding of audio-visual objects â Part 12: ISO Base Media File Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="December"/>
  </front>
</reference>




<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CMAF" >
  <front>
    <title>Information technology -- Multimedia application format (MPEG-A) -- Part 19: Common media application format (CMAF) for segmented media</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020" month="March"/>
  </front>
</reference>




<reference anchor='NewReno' target='https://www.rfc-editor.org/info/rfc6582'>
<front>
<title>The NewReno Modification to TCP's Fast Recovery Algorithm</title>
<author fullname='T. Henderson' initials='T.' surname='Henderson'><organization/></author>
<author fullname='S. Floyd' initials='S.' surname='Floyd'><organization/></author>
<author fullname='A. Gurtov' initials='A.' surname='Gurtov'><organization/></author>
<author fullname='Y. Nishida' initials='Y.' surname='Nishida'><organization/></author>
<date month='April' year='2012'/>
<abstract><t>RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery.  RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to &quot;partial acknowledgments&quot; (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK.  This document describes a specific algorithm for responding to partial acknowledgments, referred to as &quot;NewReno&quot;.  This response to partial acknowledgments was first proposed by Janey Hoe.  This document obsoletes RFC 3782.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6582'/>
<seriesInfo name='DOI' value='10.17487/RFC6582'/>
</reference>


<reference anchor='BBR'>
   <front>
      <title>BBR Congestion Control</title>
      <author fullname='Neal Cardwell' initials='N.' surname='Cardwell'>
         <organization>Google</organization>
      </author>
      <author fullname='Yuchung Cheng' initials='Y.' surname='Cheng'>
         <organization>Google</organization>
      </author>
      <author fullname='Soheil Hassas Yeganeh' initials='S. H.' surname='Yeganeh'>
         <organization>Google</organization>
      </author>
      <author fullname='Ian Swett' initials='I.' surname='Swett'>
         <organization>Google</organization>
      </author>
      <author fullname='Van Jacobson' initials='V.' surname='Jacobson'>
         <organization>Google</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies the BBR congestion control algorithm.  BBR
   (&quot;Bottleneck Bandwidth and Round-trip propagation time&quot;) uses recent
   measurements of a transport connection&#39;s delivery rate, round-trip
   time, and packet loss rate to build an explicit model of the network
   path.  BBR then uses this model to control both how fast it sends
   data and the maximum volume of data it allows in flight in the
   network at any time.  Relative to loss-based congestion control
   algorithms such as Reno [RFC5681] or CUBIC [RFC8312], BBR offers
   substantially higher throughput for bottlenecks with shallow buffers
   or random losses, and substantially lower queueing delays for
   bottlenecks with deep buffers (avoiding &quot;bufferbloat&quot;).  BBR can be
   implemented in any transport protocol that supports packet-delivery
   acknowledgment.  Thus far, open source implementations are available
   for TCP [RFC793] and QUIC [RFC9000].  This document specifies version
   2 of the BBR algorithm, also sometimes referred to as BBRv2 or bbr2.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-cardwell-iccrg-bbr-congestion-control-02'/>
   <format target='https://www.ietf.org/archive/id/draft-cardwell-iccrg-bbr-congestion-control-02.txt' type='TXT'/>
</reference>




    </references>


<section numbered="false" anchor="contributors" title="Contributors">

<t>TODO</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

