<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-lcurley-warp-latest" category="info">

  <front>
    <title abbrev="WARP">Warp - Segmented Live Media Transport</title>

    <author initials="L." surname="Curley" fullname="Luke Curley">
      <organization>Twitch</organization>
      <address>
        <email>kixelated@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Pugin" fullname="Kirill Pugin">
      <organization>Meta</organization>
      <address>
        <email>ikir@meta.com</email>
      </address>
    </author>
    <author initials="S." surname="Nandakumar" fullname="Suhas Nandakumar">
      <organization>Cisco</organization>
      <address>
        <email>snandaku@cisco.com</email>
      </address>
    </author>

    <date />

    <area>General</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the core behavior for Warp, a segmented live media transport protocol.
Media is split into segments based on the underlying media encoding.
Each segment is transmitted independently over a QUIC stream.
QUIC streams are prioritized, allowing less important segments to be starved or dropped during congestion.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>Warp is a live media transport protocol that utilizes the QUIC network protocol <xref target="QUIC"/>.</t>

<t><xref target="motivation"/> covers the background and rationale behind Warp.
<xref target="segments"/> covers how media is encoded and split into segments.
<xref target="quic"/> covers how QUIC is used to transfer media.
<xref target="messages"/> covers how messages are encoded on the wire.</t>

<section anchor="terms-and-definitions" title="Terms and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Commonly used terms in this document are described below.</t>

<t><list style="hanging">
  <t hangText="Bitstream:">
  A continunous series of bytes.</t>
  <t hangText="Codec:">
  A compression algorithm for audio or video.</t>
  <t hangText="Congestion:">
  Packet loss and queuing caused by degraded or overloaded networks.</t>
  <t hangText="Consumer:">
  A QUIC endpoint receiving media over the network. This could be the media player or middleware.</t>
  <t hangText="Container:">
  A file format containing timestamps and the codec bitstream</t>
  <t hangText="Decoder:">
  A endpoint responsible for a deflating a compressed media stream into raw frames.</t>
  <t hangText="Decode Timestamp (DTS):">
  A timestamp indicating the order that frames/samples should be fed to the decoder.</t>
  <t hangText="Encoder:">
  A component responsible for creating a compressed media stream out of raw frames.</t>
  <t hangText="Frame:">
  An video image or group of audio samples to be rendered at a specific point in time.</t>
  <t hangText="I-frame:">
  A frame that does not depend on the contents of other frames; effectively an image.</t>
  <t hangText="Group of pictures (GoP):">
  A I-frame followed by a sequential series of dependent frames.</t>
  <t hangText="Group of samples:">
  A sequential series of audio samples starting at a given timestamp.</t>
  <t hangText="Player:">
  A component responsible for presenting frames to a viewer based on the presentation timestamp.</t>
  <t hangText="Presentation Timestamp (PTS):">
  A timestamp indicating when a frames/samples should be presented to the viewer.</t>
  <t hangText="Producer:">
  A QUIC endpoint sending media over the network. This could be the media encoder or middleware.</t>
  <t hangText="Rendition:">
  One or more tracks with the same content but different encodings.</t>
  <t hangText="Slice:">
  A section of a video frame. There may be multiple slices per frame.</t>
  <t hangText="Track:">
  An encoded bitstream, representing a single video/audio component that makes up the larger broadcast.</t>
</list></t>

</section>
</section>
<section anchor="motivation" title="Motivation">

<section anchor="latency" title="Latency">
<t>In a perfect world, we could deliver live media at the same rate it is produced.
The end-to-end latency of a broadcast would be fixed and only subject to encoding and transmission delays.
Unfortunately, networks have variable throughput, primarily due to congestion.</t>

<t>Attempting to deliver media larger than this variable network bitrate causes queuing.
This queuing can occur anywhere in the path between the encoder and decoder.
For example: the application, the OS socket, a wifi router, within an ISP, or generally anywhere in transit.</t>

<t>If nothing is done, new frames will be appended to the end of a growing queue and will take longer to arrive than their predecessors, increasing latency.
Our job is to minimize the growth of this queue, and failing that, skip the queue when possible.</t>

<t>Thus speed at which a media protocol can detect and respond to queuing determines the latency.
We can generally classify existing media protocols into two categories based on the underlying network protocol:</t>

<t><list style="symbols">
  <t>TCP-based media protocols (ex. RTMP, HLS, DASH) are popular due to their simplicity.
Media is served/consumed in decode order while any networking is handled by the TCP layer.
However, these protocols primarily see use at higher latency targets due to their relatively slow detection and response to queuing.</t>
  <t>UDP-based media protocols (ex. RTP, WebRTC, SRT) can side-step the issues with TCP and provide lower latency with better queue management.
However the media protocol is now responsible for fragmentation, congestion control, retransmissions, receiver feedback, reassembly, and more.
This added complexity significantly raises the implementation difficulty and hurts interoperability.</t>
</list></t>

<t>A goal of this draft is to get the best of both worlds: a simple protocol that can still rapidly detect and respond to congestion.
This is possible emergence of QUIC, designed to fix the shortcomings of TCP.
This draft relies on QUIC streams to deliver media segments in priority order during congestion.</t>

</section>
<section anchor="universal" title="Universal">
<t>The media protocol ecosystem is fragmented; each protocol has it's own niche.
Specialization is often a good thing, but we believe there's enough overlap to warrant consolidation.</t>

<t>For example, a service might simultaneously ingest via WebRTC, SRT, RTMP, and/or a custom UDP protocol depending on the broadcaster.
The same service might then simultaneously distribute via WebRTC, LL-HLS, HLS, (or the DASH variants) and/or a custom UDP protocol depending on the viewer.</t>

<t>These media protocols are radically different and not interoperable; requiring transcoding or transmuxing.
This cost is further increased by the need to maintain separate stacks with different expertise requirements.</t>

<t>A goal of this draft is to cover a large spectrum of use-cases. Specifically:</t>

<t><list style="symbols">
  <t>Consolidated contribution and distribution.
The primary difference between the two is the ability to fanout.
How does a CDN know how to forward media to N consumers and how does it reduce the encoded bitrate during congestion?
A single protocol can cover both use-cases provided intermediaries are informed on how to forward and drop media.</t>
  <t>A configurable latency versus quality trade-off.
The producer (broadcaster) chooses how to encode and transmit media based on the desired user experience.
Each consumer (viewer) chooses how long to wait for media based on their desired user experience and network.
We want an experience that can vary from real-time and lossy for one viewer, to delayed and loss-less for another viewer, without separate encodings or protocols.</t>
</list></t>

</section>
<section anchor="intermediaries" title="Intermediaries">
<t>The prevailing belief is that UDP-based protocols are more expensive and don't "scale".
While it's true that UDP is more difficult to optimize than TCP, QUIC itself is proof that it is is possible to reach performance parity.
In fact even some TCP-based protocols (ex. RTMP) don't "scale" either and are exclusively used for contribution as a result.</t>

<t>The truth is that the ability to scale a media protocol depends on intermediary support: proxies, caches, CDNs, SFUs, etc.
The success of HTTP-based media protocols is due to the ability to leverage traditional HTTP CDNs.</t>

<t>Meanwhile, it's difficult to build a CDN for media protocols that were not designed with intermediaries in mind.
For example, an intermediary has to parse the underlying codec to determine which RTP packets should be dropped first, and the decision is not deterministic or consistent for each hop.</t>

<t>A goal of this draft is to treat intermediaries as first class citizens.
Any identification, reliability, ordering, prioritization, caching, etc is written to the wire in header designed for intermediaries.
This ensures that intermediaries can easily route/fanout media to the final destination.
This also ensures that congestion response is consistent at every hop based on the preferences of the media producer.</t>

</section>
</section>
<section anchor="segments" title="Segments">
<t>Warp works by splitting media into segments that can be transferred over the network somewhat independently.</t>

<t><list style="symbols">
  <t>The encoder determines how to fragment the encoded bitstream into segments (<xref target="media"/>).</t>
  <t>Segments are assigned an intended delivery order that should be obeyed during congestion (<xref target="delivery-order"/>)</t>
  <t>The decoder receives each segment and skips any segments that do not arrive in time (<xref target="decoder"/>).</t>
</list></t>

<section anchor="media" title="Media">
<t>An encoder produces one or more codec bitstreams for each track.
The bitstreams are fed to the decoder on the other end, after being transported over the network, in the same order its produced.
The problem, as explained in motivation (<xref target="latency"/>), is that networks cannot sustain a continuous rate and thus queuing occurs.
See the appendix for an overview of media encoding (<xref target="appendix.encoding"/>).</t>

<t>Warp works by fragmenting the bitstream into segments that can be transmitted independently.
Depending on how the segments are fragmented, the decoder has the ability to safely drop media during congestion.
See the appendix for fragmentation examples (<xref target="appendix.examples"/>)</t>

<t>A segment:</t>

<t><list style="symbols">
  <t>MUST contain a single track.</t>
  <t>MUST be in decode order. This means an increasing DTS.</t>
  <t>MAY contain any number of frames/samples.</t>
  <t>MAY have gaps between frames/samples.</t>
  <t>MAY overlap with other segments. This means interleaved timestamps.</t>
  <t>MAY reference frames in other segments, but only if listed as a dependency.</t>
</list></t>

<t>Segments are encoded using fragmented MP4 <xref target="ISOBMFF"/>.
This is necessary to store timestamps and various metadata depending on the codec.
A future draft of Warp may specify other container formats.</t>

</section>
<section anchor="delivery-order" title="Delivery Order">
<t>Media is produced with an intended order, both in terms of when media should be presented (PTS) and when media should be decoded (DTS).
As stated in motivation (<xref target="latency"/>), the network is unable to maintain this ordering during congestion without increasing latency.</t>

<t>Warp responds to congestion by assigning each segment a numeric delivery order.
The delivery order SHOULD be followed when possible to ensure that the most important media is delivered when throughput is limited.
Note that the contents within each segment are still delivered in order; this delivery order only applies to the ordering between segments.</t>

<t>The encoder determines the value assigned to each segment based the media encoding and desired user experience.
Multiple segments MAY use the same value, in which case they SHOULD be delivered via round-robin.
See the appendix for examples (<xref target="appendix.examples"/>).</t>

<t>A sender SHOULD attempt to deliver segments based on this delivery order.
This effectively involves creating a priority queue in ascending order, allocating any avaiable bandwidth to the next pending segment.
Since each segment is sent over a dedicated QUIC stream, the next QUIC packet SHOULD contain a STREAM frame for the next pending segment, repeated until the congestion window is hit.
The sender MAY ignore the delivery order for retransmits and MUST ignore it when flow control limits are reached.</t>

<t>A receiver MUST NOT assume that segments will be received in delivery order for a number of reasons:
* Newly encoded segments MAY have a smaller delivery order than outstanding segments.
* Packet loss or flow control MAY delay the delivery of individual streams.
* The sender might not support QUIC stream prioritization.</t>

<t>Segments arrive in delivery order, but media usually needs to be processed in decode order.
The decoder SHOULD use a buffer to reassmble segments into decode order and it SHOULD skip segments after a configurable duration.
The amount of time the decoder is willing to wait for a segment (buffer duration) is what ultimately determines the latency.</t>

<t>A proxy MAY change the delivery order, in which case it SHOULD update the value on the wire for future hops.
This is NOT RECOMMENDED unless the proxy knows additional information about the media.
For example, a proxy could use the PTS as the delivery order to enable head-of-line blocking for content that should not be skipped, like an advertisement.</t>

</section>
<section anchor="decoder" title="Decoder">
<t>The decoder will receive multiple segments in parallel.
The decoder MUST synchronize segments using presentation timestamps within the bitstream.
The decoder SHOULD use a buffer to reorder frames/samples from separate segments into decode order.</t>

<t>Segments are NOT REQUIRED to be aligned.
A decoder MUST be prepared to skip over any gaps between segments.</t>

</section>
</section>
<section anchor="quic" title="QUIC">

<section anchor="establishment" title="Establishment">
<t>A connection is established using WebTransport <xref target="WebTransport"/>.</t>

<t>To summarize:
The client issues a HTTP CONNECT request with the intention of establishing a new WebTransport session.
The server returns an 200 OK response if the WebTransport session has been established, or an error status otherwise.</t>

<t>A WebTransport session exposes the basic QUIC service abstractions.
Specifically, either endpoint may create independent streams which are reliably delivered in order until canceled.</t>

<t>WebTransport can currently operate via HTTP/3 and HTTP/2, using QUIC or TCP under the hood respectively.
As mentioned in the motivation (<xref target="motivation"/>) section, TCP introduces head-of-line blocking and will result in a worse experience.
It is RECOMMENDED to use WebTransport over HTTP/3.</t>

<t>The application SHOULD use the CONNECT request for authentication and negotiation.
For example, including a authentication token and some identifier in the path.
The application MAY use QUIC streams for more complicated behavior.</t>

</section>
<section anchor="streams" title="Streams">
<t>Warp endpoints communicate over unidirectional QUIC streams.
The application MAY use bidirectional QUIC streams for other purposes.</t>

<t>A stream consists of sequential messages.
See messages (<xref target="messages"/>) for the list of messages and their encoding.
These are similar to QUIC and HTTP/3 frames, but called messages to avoid the media terminology.</t>

<t>Each stream MUST start with a <spanx style="verb">HEADERS</spanx> message that indicates how the stream should be transmitted.</t>

<t>Messages SHOULD be sent over the same stream if ordering is desired.
For example, <spanx style="verb">PAUSE</spanx> and <spanx style="verb">PLAY</spanx> messages SHOULD be sent on the same stream to avoid a race.</t>

</section>
<section anchor="prioritization" title="Prioritization">
<t>Warp utilizes stream prioritization to deliver the most important content during congestion.</t>

<t>The media producer SHOULD assign a numeric order to each stream, as contained in the HEADERS message (<xref target="headers"/>).
This is a strict prioritization scheme, such that any available bandwidth is allocated to streams in ascending order.
The delivery order is determined at encode, written to the wire so it can be read by intermediaries, and will not be updated.
This effectively creates a priority queue that can be maintained over multiple hops.</t>

<t>QUIC supports stream prioritization but does not standardize any mechanisms; see Section 2.3 in <xref target="QUIC"/>.
QUIC libraries will need to expose a API to the application to set the priority of each stream.</t>

<t>Senders SHOULD support prioritized streams, although it is OPTIONAL on a path with no expected congestion.
Senders SHOULD use strict ordering, although relative weights MAY be acceptable if there are no other options.
Senders MUST obey the order as written to the wire.
Senders MAY choose to delay retransmitting lower priority streams when possible within QUIC flow control limits.</t>

</section>
<section anchor="cancellation" title="Cancellation">
<t>QUIC streams can be canceled by either endpoint with an error code.</t>

<t>When using <spanx style="verb">order</spanx>, lower priority streams will be starved during congestion, perhaps indefinitely.
These streams will consume resources and flow control until they are canceled.
When nearing resource limits, an endpoint SHOULD cancel the lowest priority stream with error code 0.</t>

<t>When using <spanx style="verb">expires</spanx>, a stream SHOULD be canceled after the duration has elapsed.
This is not a full replacement for prioritization, but can provide some congestion response by clearing parts of the queue.</t>

</section>
<section anchor="congestion-control" title="Congestion Control">
<t>As covered in the motivation section (<xref target="motivation"/>), the ability to prioritize or cancel streams is a form of congestion response.
It's equally important to detect congestion via congestion control, which is handled in the QUIC layer <xref target="QUIC-RECOVERY"/>.</t>

<t>Bufferbloat is caused by routers queueing packets for an indefinite amount of time rather than drop them.
This latency significantly reduces the ability for the application to prioritize or drop media in response to congestion.
Senders SHOULD use a congestion control algorithm that reduces this bufferbloat (ex. <xref target="BBR"/>).
It is NOT RECOMMENDED to use a loss-based algorithm (ex. <xref target="NewReno"/>) unless the network fully supports ECN.</t>

<t>Live media is application-limited, which means that the encoder determines the max bitrate rather than the network.
Most TCP congestion control algorithms will only increase the congestion window if it is full, limiting the upwards mobility when application-limited.
Senders SHOULD use a congestion control algorithm that is designed for application-limited flows (ex. GCC).
Senders MAY periodically pad the connection with QUIC PING frames to fill the congestion window.</t>

</section>
<section anchor="termination" title="Termination">
<t>The QUIC connection can be terminated at any point with an error code.</t>

<t>The media producer MAY terminate the QUIC connection with an error code of 0 to indicate the clean termination of the broadcast.
The application SHOULD use a non-zero error code to indicate a fatal error.</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Reason</ttcol>
      <c>0x0</c>
      <c>Broadcast Terminated</c>
      <c>0x1</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

</section>
</section>
<section anchor="messages" title="Messages">
<t>Messages consist of a type identifier followed by contents, depending on the message type.</t>

<t>TODO document the encoding</t>

<texttable>
      <ttcol align='right'>ID</ttcol>
      <ttcol align='left'>Messages</ttcol>
      <c>0x0</c>
      <c>HEADERS <xref target="headers"/></c>
      <c>0x1</c>
      <c>SEGMENT <xref target="segment"/></c>
      <c>0x2</c>
      <c>APP <xref target="app"/></c>
      <c>0x10</c>
      <c>GOAWAY <xref target="goaway"/></c>
</texttable>

<section anchor="headers" title="HEADERS">
<t>The <spanx style="verb">HEADERS</spanx> message contains information required to deliver, cache, and forward a stream.
This message SHOULD be parsed and obeyed by any Warp proxies.</t>

<t><list style="symbols">
  <t><spanx style="verb">id</spanx>.
An unique identifier for the stream.
This field is optional and MUST be unique if set.</t>
  <t><spanx style="verb">order</spanx>.
An numeric value indicating the delivery order (<xref target="delivery-order"/>).
A sender SHOULD transmit streams with smallest value first, as bandwidth permits.
If two streams use the same value, they SHOULD be round-robined.
Note that streams can still arrive out of the intended order due to packet loss.
This field is optional and the default value is 0.</t>
  <t><spanx style="verb">depends</spanx>.
An list of dependencies by stream identifier.
The decoder SHOULD process the specified dependencies first.
The decoder MAY support stream processing via the decode timestamp (DTS), such that it does not need to fully receive the dependency segments first.
The segment SHOULD have a larger <spanx style="verb">order</spanx> than its dependencies, if present.
This field is optional.</t>
</list></t>

<t>TODO use QPACK?</t>

</section>
<section anchor="segment" title="SEGMENT">
<t>A <spanx style="verb">SEGMENT</spanx> message consists of a segment in a fragmented MP4 container.</t>

<t>Each segment MUST start with an initialization fragment, or MUST depend on a segment with an initialization fragment.
An initialization fragment consists of a File Type Box (ftyp) followed by a Movie Box (moov).
This Movie Box (moov) consists of Movie Header Boxes (mvhd), Track Header Boxes (tkhd), Track Boxes (trak), followed by a final Movie Extends Box (mvex).
These boxes MUST NOT contain any samples and MUST have a duration of zero.
Note that a Common Media Application Format Header <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Each segment MAY have a Segment Type Box (styp) followed by any number of media fragments.
Each media fragment consists of a Movie Fragment Box (moof) followed by a Media Data Box (mdat).
The Media Fragment Box (moof) MUST contain a Movie Fragment Header Box (mfhd) and Track Box (trak) with a Track ID (<spanx style="verb">track_ID</spanx>) matching a Track Box in the initialization fragment.
Note that a Common Media Application Format Segment <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Media fragments can be packaged at any frequency, causing a trade-off between overhead and latency.
It is RECOMMENDED that a media fragment consists of a single frame to minimize latency.</t>

</section>
<section anchor="app" title="APP">
<t>The <spanx style="verb">APP</spanx> message contains arbitrary contents.</t>

</section>
<section anchor="goaway" title="GOAWAY">
<t>The <spanx style="verb">GOAWAY</spanx> message is sent by the server to force the client to reconnect.
This is useful for server maintenance or reassignments without severing the QUIC connection.
A server MAY use QUIC load balancing instead of a GOAWAY message.</t>

<t>The server:
* MAY initiate a graceful shutdown by sending a GOAWAY message.
* MUST close the QUIC connection after a timeout with the GOAWAY error code (<xref target="termination"/>).
* MAY close the QUIC connection with a different error code if there is a fatal error before shutdown.
* SHOULD wait until the <spanx style="verb">GOAWAY</spanx> message and any pending streams have been fully acknowledged, plus an extra delay to ensure they have been processed.</t>

<t>The client:
* MUST establish a new WebTransport session to the provided URL upon receipt of a <spanx style="verb">GOAWAY</spanx> message.
* SHOULD establish the connection in parallel which MUST use different QUIC connection.
* SHOULD remain connected for two servers for a short period, processing segments from both in parallel.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">
<t>TODO</t>

<section anchor="resource-exhaustion" title="Resource Exhaustion">
<t>Live media requires significant bandwidth and resources.
Failure to set limits will quickly cause resource exhaustion.</t>

<t>Warp uses QUIC flow control to impose resource limits at the network layer.
Endpoints SHOULD set flow control limits based on the anticipated media bitrate.</t>

<t>The media producer prioritizes and transmits streams out of order.
Streams might be starved indefinitely during congestion and SHOULD be canceled after hitting some timeout or resource limit.</t>

<t>The media consumer might receive streams out of order.
If stream data is buffered, for example to decode segments in order, then the media consumer SHOULD cancel a stream after hitting some timeout or resource limit.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>TODO</t>

</section>
<section anchor="appendix.encoding" title="Appendix A. Video Encoding">
<t>In order to transport media, we first need to know how media is encoded.
This section is an overview of media encoding.</t>

<section anchor="tracks" title="Tracks">
<t>A broadcast consists of one or more tracks.
Each track has a type (audio, video, caption, etc) and uses a cooresponding codec.
There may be multiple tracks, including of the same type for a number of reasons.</t>

<t>For example:</t>

<t><list style="symbols">
  <t>A track for each codec.</t>
  <t>A track for each resolution and bitrate.</t>
  <t>A track for each language.</t>
  <t>A track for each camera feed.</t>
</list></t>

<t>Tracks can be muxed together into a single container or stream.
The goal of Warp is to independently deliver tracks, and even parts of a track, so this is not allowed.
Each Warp segment MUST contain a single track.</t>

</section>
<section anchor="appendix.init" title="Init">
<t>Media codecs have a wide array of configuration options.
For example, the resolution, the color space, the features enabled, etc.</t>

<t>Before playback can begin, the decoder needs to know how the configuration.
This is done via a short payload at the very start of the media file.
The initialization payload can be cached and reused between segments with the same configuration.</t>

</section>
<section anchor="appendix.video" title="Video">
<t>Video is a sequence of pictures (frames) with a presentation timestamp (PTS).</t>

<t>An I-frame is a frame with no dependencies and is effectively an image file.
These frames are usually inserted at a frequent interval to support seeking or joining a live stream.
However they can also improve compression when used at hard scene cuts.</t>

<t>A P-frame is a frame that references on one or more earlier frames.
These frames are delta-encoded, such that they only encode the changes (typically motion).
This result in a massive file size reduction for most content outside of few notorious cases (ex. confetti).</t>

<t>A common encoding structure is to only reference the previous frame, as it is simple and minimizes latency:</t>

<figure><artwork><![CDATA[
 I <- P <- P <- P   I <- P <- P <- P   I <- P ...
]]></artwork></figure>

<t>There is no such thing as an optimal encoding structure.
Encoders tuned for the best quality will produce a tangled spaghetti of references.
Encoders tuned for the lowest latency can avoid reference frames to allow more to be dropped.</t>

<section anchor="appendix.b-frame" title="B-Frames">
<t>The goal of video codecs is to maximize compression.
One of the improvements is to allow a frame to reference later frames.</t>

<t>A B-frame is a frame that can reference one or more frames in the future, and any number of frames in the past.
These frames are more difficult to encode/decode as they require buffering and reordering.</t>

<t>A common encoding structure is to use B-frames in a fixed pattern.
Such a fixed pattern is not optimal, but it's simpler for hardware encoding:</t>

<figure><artwork><![CDATA[
    B     B         B     B         B
   / \   / \       / \   / \       / \
  v   v v   v     v   v v   v     v   v
 I <-- P <-- P   I <-- P <-- P   I <-- P ...
]]></artwork></figure>

<t>The encoder outputs the bitstream in decode order, which means that each frame is output after its references.
This makes it easier for the decoder as all references are earlier in the bitstream and can be decoded immediately.</t>

<t>However, this causes problems with B-frames because they depend on a future frame, and some reordering has to occur.
In order to keep track of this, frames have a decode timestamp (DTS) in addition to a presentation timestamp (PTS).
A B-frame will have higher DTS value that its dependencies, while PTS and DTS will be the same for other frame types.</t>

<t>For the example above, this would look like:</t>

<figure><artwork><![CDATA[
PTS: I B P B P I B P B P B
DTS: I   PB  PBI   PB  PB
]]></artwork></figure>

<t>B-frames add latency because of this reordering so they are usually not used for conversational latency.</t>

</section>
<section anchor="appendix.gop" title="Group of Pictures">
<t>A group of pictures (GoP) is an I-frame followed by any number of frames until the next I-frame.
All frames MUST reference, either directly or indirectly, only the most recent I-frame.</t>

<figure><artwork><![CDATA[
        GoP               GoP            GoP
+-----------------+-----------------+---------------
|     B     B     |     B     B     |     B
|    / \   / \    |    / \   / \    |    / \
|   v   v v   v   |   v   v v   v   |   v   v
|  I <-- P <-- P  |  I <-- P <-- P  |  I <-- P ...
+-----------------+-----------------+--------------
]]></artwork></figure>

<t>This is a useful abstraction because GoPs can always be decoded independently.</t>

</section>
<section anchor="appendix.svc" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy.
This layered coding means that dropping the top layer degrades the user experience in a configured way.
Examples include reducing the resolution, picture quality, and/or frame rate.</t>

<t>Here is an example SVC encoding with 3 resolutions:</t>

<figure><artwork><![CDATA[
      +-------------------------+------------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P ...
      +-------------------------+------------------
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.audio" title="Audio">
<t>Audio is dramatically simpler than video as it is not typically delta encoded.
Audio samples are grouped together (group of samples) at a configured rate, also called a "frame".</t>

<t>The encoder spits out a continuous stream of samples (S):</t>

<figure><artwork><![CDATA[
S S S S S S S S S S S S S ...
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.examples" title="Appendix B. Segment Examples">
<t>Warp offers a large degree of flexability on how segments are fragmented and prioritized.
There is no best solution; it depends on the desired complexity and user experience.</t>

<t>This section provides a summary of some options available.</t>

<section anchor="video" title="Video">

<section anchor="group-of-pictures" title="Group of Pictures">
<t>A group of pictures (GoP) is consists of an I-frame and all frames that directly or indirectly reference it (<xref target="appendix.gop"/>).
The tail of a GoP can be dropped without causing decode errors, even if the encoding is otherwise unknown, making this the safest option.</t>

<t>It is RECOMMENDED that each segment consist of a single GoP.
For example:</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
]]></artwork></figure>

<t>Depending on the video encoding, this approach may introduce unnecessary ordering and dependencies.
A better option may be available below.</t>

</section>
<section anchor="scalable-video-coding" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy (<xref target="appendix.svc"/>).</t>

<t>When SVC is used, it is RECOMMENDED that each segment consist of a single layer and GoP.
For example:</t>

<figure><artwork><![CDATA[
               segment 3             segment 6
      +-------------------------+---------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 2             segment 5
      +-------------------------+---------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 1             segment 4
      +-------------------------+---------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P
      +-------------------------+---------------
]]></artwork></figure>

</section>
<section anchor="frames" title="Frames">
<t>With full knowledge of the encoding, the encoder MAY can split a GoP into multiple segments based on the frame.
However, this is highly dependent on the encoding, and the additional complexity might not improve the user experience.</t>

<t>For example, we could split our example B-frame structure (<xref target="appendix.b-frame"/>) into 13 segments:</t>

<figure><artwork><![CDATA[
      2     4           7     9           12
+--------+--------+--------+--------+-----------+
|     B  |  B     |     B  |  B     |     B     |
|-----+--+--+-----+-----+--+--+-----+-----+-----+
|  I  |  P  |  P  |  I  |  P  |  P  |  I  |  P  |
+-----+-----+-----+-----+-----+-----+-----+-----+
   1     3     5     6     8     10    11    13
]]></artwork></figure>

<t>To reduce the number of segments, segments can be merged with their dependency.
QUIC streams will deliver each segment in order so this produces the same result as reordering within the application.</t>

<t>The same GoP structure can be represented using eight segments:</t>

<figure><artwork><![CDATA[
      2     3           5     6           8
+--------+--------+-----------------+------------
|     B  |  B     |     B  |  B     |     B     |
+--------+--------+--------+--------+-----------+
|  I     P     P  |  I     P     P  |  I     P
+-----------------+-----------------+------------
         1                 4              7
]]></artwork></figure>

<t>We can further reduce the number of segments by combining frames that don't depend on each other.
The only restriction is that frames can only reference frames earlier in the segment, or within a dependency segment.
For example, non-reference frames can have their own segment so they can be prioritized or dropped separate from reference frames.</t>

<t>The same GoP structure can also be represented using six segments, although we've removed the ability to drop individual B-frames:</t>

<figure><artwork><![CDATA[
   segment 2     segment 4   segment 6
+-------------+-------------+---------
|    B   B    |    B   B    |    B
+-------------+-------------+---------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+---------
   segment 1     segment 3   segment 5
]]></artwork></figure>

</section>
<section anchor="init" title="Init">
<t>Initialization data (<xref target="appendix.init"/>) is required to initialize the decoder.
Each segment MAY start with initialization data although this adds overhead.</t>

<t>Instead, it is RECOMMENDED to create a init segment.
Each media segment can then depend on the init segment to avoid the redundant overhead.
For example:</t>

<figure><artwork><![CDATA[
    segment 2       segment 3    segment 5
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
|              init             |  init
+-------------------------------+---------
             segment 1           segment 4
]]></artwork></figure>

</section>
</section>
<section anchor="audio" title="Audio">
<t>Audio (<xref target="appendix.audio"/>) is much simpler than video so there's fewer options.</t>

<t>The simplest configuration is to use a single segment for each audio track.
This may seem inefficient given the ease of dropping audio samples.
However, the audio bitrate is low and gaps cause quite a poor user experience, when compared to video.</t>

<figure><artwork><![CDATA[
         segment 1
+---------------------------
| S S S S S S S S S S S S S
+---------------------------
]]></artwork></figure>

<t>An improvement is to periodically split audio samples into separate segments.
This gives the consumer the ability to skip ahead during severe congestion or temporary connectivity loss.</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
]]></artwork></figure>

<t>This frequency of audio segments is configurable, at the cost of additional overhead.
It's NOT RECOMMENDED to create a segment for each audio frame because of this overhead.</t>

<t>Since video can only recover from severe congestion with an I-frame, so there's not much point recovering audio at a separate interval.
It is RECOMMENDED to create a new audio segment at each video I-frame.</t>

<figure><artwork><![CDATA[
    segment 1       segment 3    segment 5
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
    segment 2       segment 4    segment 6
]]></artwork></figure>

</section>
<section anchor="appendix.delivery-order" title="Delivery Order">
<t>The delivery order (<xref target="delivery-order"/> depends on the desired user experience during congestion:</t>

<t><list style="symbols">
  <t>if media should be skipped: delivery order = PTS</t>
  <t>if media should not be skipped: delivery order = -PTS</t>
  <t>if video should be skipped before audio: audio delivery order &lt; video delivery order</t>
</list></t>

<t>The delivery order may be changed if the content changes.
For example, switching from a live stream (skippable) to an advertisement (unskippable).</t>

</section>
</section>
<section numbered="false" anchor="contributors" title="Contributors">

<t>TODO</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='QUIC' target='https://www.rfc-editor.org/info/rfc9000'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='M. Thomson' initials='M.' role='editor' surname='Thomson'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t></abstract>
</front>
<seriesInfo name='RFC' value='9000'/>
<seriesInfo name='DOI' value='10.17487/RFC9000'/>
</reference>



<reference anchor='QUIC-RECOVERY' target='https://www.rfc-editor.org/info/rfc9002'>
<front>
<title>QUIC Loss Detection and Congestion Control</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='I. Swett' initials='I.' role='editor' surname='Swett'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document describes loss detection and congestion control mechanisms for QUIC.</t></abstract>
</front>
<seriesInfo name='RFC' value='9002'/>
<seriesInfo name='DOI' value='10.17487/RFC9002'/>
</reference>


<reference anchor='WebTransport'>
   <front>
      <title>WebTransport over HTTP/3</title>
      <author fullname='Alan Frindell' initials='A.' surname='Frindell'>
         <organization>Facebook</organization>
      </author>
      <author fullname='Eric Kinnear' initials='E.' surname='Kinnear'>
         <organization>Apple Inc.</organization>
      </author>
      <author fullname='Victor Vasiliev' initials='V.' surname='Vasiliev'>
         <organization>Google</organization>
      </author>
      <date day='6' month='July' year='2022'/>
      <abstract>
	 <t>   WebTransport [OVERVIEW] is a protocol framework that enables clients
   constrained by the Web security model to communicate with a remote
   server using a secure multiplexed transport.  This document describes
   a WebTransport protocol that is based on HTTP/3 [HTTP3] and provides
   support for unidirectional streams, bidirectional streams and
   datagrams, all multiplexed within the same HTTP/3 connection.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-webtrans-http3-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-webtrans-http3-03.txt' type='TXT'/>
</reference>


<reference anchor="ISOBMFF" >
  <front>
    <title>Information technology â Coding of audio-visual objects â Part 12: ISO Base Media File Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="December"/>
  </front>
</reference>




<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CMAF" >
  <front>
    <title>Information technology -- Multimedia application format (MPEG-A) -- Part 19: Common media application format (CMAF) for segmented media</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020" month="March"/>
  </front>
</reference>




<reference anchor='NewReno' target='https://www.rfc-editor.org/info/rfc6582'>
<front>
<title>The NewReno Modification to TCP's Fast Recovery Algorithm</title>
<author fullname='T. Henderson' initials='T.' surname='Henderson'><organization/></author>
<author fullname='S. Floyd' initials='S.' surname='Floyd'><organization/></author>
<author fullname='A. Gurtov' initials='A.' surname='Gurtov'><organization/></author>
<author fullname='Y. Nishida' initials='Y.' surname='Nishida'><organization/></author>
<date month='April' year='2012'/>
<abstract><t>RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery.  RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to &quot;partial acknowledgments&quot; (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK.  This document describes a specific algorithm for responding to partial acknowledgments, referred to as &quot;NewReno&quot;.  This response to partial acknowledgments was first proposed by Janey Hoe.  This document obsoletes RFC 3782.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6582'/>
<seriesInfo name='DOI' value='10.17487/RFC6582'/>
</reference>


<reference anchor='BBR'>
   <front>
      <title>BBR Congestion Control</title>
      <author fullname='Neal Cardwell' initials='N.' surname='Cardwell'>
         <organization>Google</organization>
      </author>
      <author fullname='Yuchung Cheng' initials='Y.' surname='Cheng'>
         <organization>Google</organization>
      </author>
      <author fullname='Soheil Hassas Yeganeh' initials='S. H.' surname='Yeganeh'>
         <organization>Google</organization>
      </author>
      <author fullname='Ian Swett' initials='I.' surname='Swett'>
         <organization>Google</organization>
      </author>
      <author fullname='Van Jacobson' initials='V.' surname='Jacobson'>
         <organization>Google</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies the BBR congestion control algorithm.  BBR
   (&quot;Bottleneck Bandwidth and Round-trip propagation time&quot;) uses recent
   measurements of a transport connection&#39;s delivery rate, round-trip
   time, and packet loss rate to build an explicit model of the network
   path.  BBR then uses this model to control both how fast it sends
   data and the maximum volume of data it allows in flight in the
   network at any time.  Relative to loss-based congestion control
   algorithms such as Reno [RFC5681] or CUBIC [RFC8312], BBR offers
   substantially higher throughput for bottlenecks with shallow buffers
   or random losses, and substantially lower queueing delays for
   bottlenecks with deep buffers (avoiding &quot;bufferbloat&quot;).  BBR can be
   implemented in any transport protocol that supports packet-delivery
   acknowledgment.  Thus far, open source implementations are available
   for TCP [RFC793] and QUIC [RFC9000].  This document specifies version
   2 of the BBR algorithm, also sometimes referred to as BBRv2 or bbr2.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-cardwell-iccrg-bbr-congestion-control-02'/>
   <format target='https://www.ietf.org/archive/id/draft-cardwell-iccrg-bbr-congestion-control-02.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
zf75yRxwvXvywHuDB/8BzupmwEeJAAA=

-->

</rfc>

