<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.5 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc docmapping="yes"?>

<rfc ipr="trust200902" docName="draft-lcurley-warp-latest" category="info">

  <front>
    <title abbrev="WARP">Warp - Segmented Live Media Transport</title>

    <author initials="L." surname="Curley" fullname="Luke Curley">
      <organization>Twitch</organization>
      <address>
        <email>kixelated@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Pugin" fullname="Kirill Pugin">
      <organization>Meta</organization>
      <address>
        <email>ikir@meta.com</email>
      </address>
    </author>
    <author initials="S." surname="Nandakumar" fullname="Suhas Nandakumar">
      <organization>Cisco</organization>
      <address>
        <email>snandaku@cisco.com</email>
      </address>
    </author>

    <date />

    <area>General</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document defines the core behavior for Warp, a segmented live media transport protocol over QUIC.
Media is split into segments based on the underlying media encoding and transmitted independently over QUIC streams.
QUIC streams are prioritized based on the delivery order, allowing less important segments to be starved or dropped during congestion.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">
<t>Warp is a live media transport protocol that utilizes the QUIC network protocol <xref target="QUIC"/>.</t>

<t><list style="symbols">
  <t><xref target="motivation"/> covers the background and rationale behind Warp.</t>
  <t><xref target="segments"/> covers how media is encoded and split into segments.</t>
  <t><xref target="quic"/> covers how QUIC is used to transfer media.</t>
  <t><xref target="messages"/> covers how messages are encoded on the wire.</t>
</list></t>

<section anchor="terms-and-definitions" title="Terms and Definitions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>Commonly used terms in this document are described below.</t>

<t><list style="hanging">
  <t hangText="Bitstream:">
  A continunous series of bytes.</t>
  <t hangText="Codec:">
  A compression algorithm for audio or video.</t>
  <t hangText="Congestion:">
  Packet loss and queuing caused by degraded or overloaded networks.</t>
  <t hangText="Consumer:">
  A QUIC endpoint receiving media over the network. This could be the media player or middleware.</t>
  <t hangText="Container:">
  A file format containing timestamps and the codec bitstream</t>
  <t hangText="Decoder:">
  A endpoint responsible for a deflating a compressed media stream into raw frames.</t>
  <t hangText="Decode Timestamp (DTS):">
  A timestamp indicating the order that frames/samples should be fed to the decoder.</t>
  <t hangText="Encoder:">
  A component responsible for creating a compressed media stream out of raw frames.</t>
  <t hangText="Frame:">
  An video image or group of audio samples to be rendered at a specific point in time.</t>
  <t hangText="I-frame:">
  A frame that does not depend on the contents of other frames; effectively an image.</t>
  <t hangText="Group of pictures (GoP):">
  A I-frame followed by a sequential series of dependent frames.</t>
  <t hangText="Group of samples:">
  A sequential series of audio samples starting at a given timestamp.</t>
  <t hangText="Player:">
  A component responsible for presenting frames to a viewer based on the presentation timestamp.</t>
  <t hangText="Presentation Timestamp (PTS):">
  A timestamp indicating when a frames/samples should be presented to the viewer.</t>
  <t hangText="Producer:">
  A QUIC endpoint sending media over the network. This could be the media encoder or middleware.</t>
  <t hangText="Rendition:">
  One or more tracks with the same content but different encodings.</t>
  <t hangText="Slice:">
  A section of a video frame. There may be multiple slices per frame.</t>
  <t hangText="Track:">
  An encoded bitstream, representing a single video/audio component that makes up the larger broadcast.</t>
</list></t>

</section>
</section>
<section anchor="motivation" title="Motivation">

<section anchor="latency" title="Latency">
<t>In a perfect world, we could deliver live media at the same rate it is produced.
The end-to-end latency of a broadcast would be fixed and only subject to encoding and transmission delays.
Unfortunately, networks have variable throughput, primarily due to congestion.</t>

<t>Attempting to deliver media encoded at a higher bitrate than the network can support causes queuing.
This queuing can occur anywhere in the path between the encoder and decoder.
For example: the application, the OS socket, a wifi router, within an ISP, or generally anywhere in transit.</t>

<t>If nothing is done, new frames will be appended to the end of a growing queue and will take longer to arrive than their predecessors, increasing latency.
Our job is to minimize the growth of this queue, and if necessary, bypass the queue entirely by dropping content.</t>

<t>The speed at which a media protocol can detect and respond to queuing determines the latency.
We can generally classify existing media protocols into two categories based on the underlying network protocol:</t>

<t><list style="symbols">
  <t>TCP-based media protocols (ex. RTMP, HLS, DASH) are popular due to their simplicity.
Media is served/consumed in decode order while any networking is handled by the TCP layer.
However, these protocols primarily see usage at higher latency targets due to their relatively slow detection and response to queuing.</t>
  <t>UDP-based media protocols (ex. RTP, WebRTC, SRT) can side-step the issues with TCP and provide lower latency with better queue management.
However the media protocol is now responsible for fragmentation, congestion control, retransmissions, receiver feedback, reassembly, and more.
This added complexity significantly raises the implementation difficulty and hurts interoperability.</t>
</list></t>

<t>A goal of this draft is to get the best of both worlds: a simple protocol that can still rapidly detect and respond to congestion.
This is possible emergence of QUIC, designed to fix the shortcomings of TCP.</t>

</section>
<section anchor="universal" title="Universal">
<t>The media protocol ecosystem is fragmented; each protocol has it's own niche.
Specialization is often a good thing, but we believe there's enough overlap to warrant consolidation.</t>

<t>For example, a service might simultaneously ingest via WebRTC, SRT, RTMP, and/or a custom UDP protocol depending on the broadcaster.
The same service might then simultaneously distribute via WebRTC, LL-HLS, HLS, (or the DASH variants) and/or a custom UDP protocol depending on the viewer.</t>

<t>These media protocols are often radically different and not interoperable; requiring transcoding or transmuxing.
This cost is further increased by the need to maintain separate stacks with different expertise requirements.</t>

<t>A goal of this draft is to cover a large spectrum of use-cases. Specifically:</t>

<t><list style="symbols">
  <t>Consolidated contribution and distribution.
The primary difference between the two is the ability to fanout.
How does a CDN know how to forward media to N consumers and how does it reduce the encoded bitrate during congestion?
A single protocol can cover both use-cases provided relays are informed on how to forward and drop media.</t>
  <t>A configurable latency versus quality trade-off.
The producer (broadcaster) chooses how to encode and transmit media based on the desired user experience.
Each consumer (viewer) chooses how long to wait for media based on their desired user experience and network.
We want an experience that can vary from real-time and lossy for one viewer, to delayed and loss-less for another viewer, without separate encodings or protocols.</t>
</list></t>

<t>A related goal is to not reinvent how media is encoded.
The same codec bitstream and container should be usable between different protocols.</t>

</section>
<section anchor="relays" title="Relays">
<t>The prevailing belief is that UDP-based protocols are more expensive and don't "scale".
While it's true that UDP is more difficult to optimize than TCP, QUIC itself is proof that it is possible to reach performance parity.
In fact even some TCP-based protocols (ex. RTMP) don't "scale" either and are exclusively used for contribution as a result.</t>

<t>The ability to scale a media protocol actually depends on relay support: proxies, caches, CDNs, SFUs, etc.
The success of HTTP-based media protocols is due to the ability to leverage traditional HTTP CDNs.</t>

<t>It's difficult to build a CDN for media protocols that were not designed with relays in mind.
For example, an relay has to parse the underlying codec to determine which RTP packets should be dropped first, and the decision is not deterministic or consistent for each hop.
This is the fatal flaw of many UDP-based protocols.</t>

<t>A goal of this draft is to treat relays as first class citizens.
Any identification, reliability, ordering, prioritization, caching, etc is written to the wire in a header that is easy to parse.
This ensures that relays can easily route/fanout media to the final destination.
This also ensures that congestion response is consistent at every hop based on the preferences of the media producer.</t>

</section>
</section>
<section anchor="segments" title="Segments">
<t>Warp works by splitting media into segments that can be transferred over QUIC streams.</t>

<t><list style="symbols">
  <t>The encoder determines how to fragment the encoded bitstream into segments (<xref target="media"/>).</t>
  <t>Segments are assigned an intended delivery order that should be obeyed during congestion (<xref target="delivery-order"/>)</t>
  <t>Segments can be dependent on other segments, in which case reordering is required (<xref target="dependencies"/>).</t>
  <t>The decoder receives each segment and skips any segments that do not arrive in time (<xref target="decoder"/>).</t>
</list></t>

<section anchor="media" title="Media">
<t>An encoder produces one or more codec bitstreams for each track.
The decoder processes the codec bitstreams in the same order they were produced, with some possible exceptions based on the encoding.
See the appendix for an overview of media encoding (<xref target="appendix.encoding"/>).</t>

<t>Warp works by fragmenting the bitstream into segments that can be transmitted somewhat independently.
Depending on how the segments are fragmented, the decoder has the ability to safely drop media during congestion.
See the appendix for fragmentation examples (<xref target="appendix.examples"/>)</t>

<t>A segment:</t>

<t><list style="symbols">
  <t>MUST contain a single track.</t>
  <t>MUST be in decode order. This means an increasing DTS.</t>
  <t>MAY contain any number of frames/samples.</t>
  <t>MAY have gaps between frames/samples.</t>
  <t>MAY overlap with other segments. This means timestamps may be interleaved between segments.</t>
  <t>MAY reference frames in other segments, but only if listed as a dependency.</t>
</list></t>

<t>Segments are encoded using fragmented MP4 <xref target="ISOBMFF"/>.
This is necessary to store timestamps and various metadata depending on the codec.
A future draft of Warp may specify other container formats.</t>

</section>
<section anchor="delivery-order" title="Delivery Order">
<t>Media is produced with an intended order, both in terms of when media should be presented (PTS) and when media should be decoded (DTS).
As stated in motivation (<xref target="latency"/>), the network is unable to maintain this ordering during congestion without increasing latency.</t>

<t>The encoder determines how to behave during congestion by assigning each segment a numeric delivery order.
The delivery order SHOULD be followed when possible to ensure that the most important media is delivered when throughput is limited.
Note that the contents within each segment are still delivered in order; this delivery order only applies to the ordering between segments.</t>

<t>A segment MUST NOT have a smaller delivery order than a segment it depends on.
Delivering segments out of dependency order will increase latency and can cause artifacting when memory limits are tight.
This is especially problematic and can cause a deadlock if the receiver does release flow control until dependencies are received.</t>

<t>A sender MUST send each segment over a dedicated QUIC stream.
The QUIC library should support prioritization (<xref target="prioritization"/>) such that streams are transmitted in delivery order.</t>

<t>A receiver MUST NOT assume that segments will be received in delivery order for a number of reasons:</t>

<t><list style="symbols">
  <t>Newly encoded segments MAY have a smaller delivery order than outstanding segments.</t>
  <t>Packet loss or flow control MAY delay the delivery of individual streams.</t>
  <t>The sender might not support QUIC stream prioritization.</t>
</list></t>

</section>
<section anchor="dependencies" title="Dependencies">
<t>Media encoding uses references to improve the compression.
This creates hard and soft dependencies that need to be respected by the transport.
See the appendex for an overview of media encoding (<xref target="appendix.encoding"/>).</t>

<t>A segment MAY depend on any number of other segments.
The encoder MUST indicate these dependecies on the wire via the <spanx style="verb">HEADERS</spanx> message (<xref target="headers"/>).</t>

<t>The sender SHOULD NOT use this list of dependencies to determine which segment to transmit next.
The sender SHOULD use the delivery order instead, which MUST respect dependencies.</t>

<t>The decoder SHOULD process segments according to their dependencies.
This means buffering a segment until the relevent timestamps have been processed in all dependencies.
A decoder MAY drop dependencies at the risk of producing decoding errors and artifacts.</t>

</section>
<section anchor="decoder" title="Decoder">
<t>The decoder will receive multiple segments in parallel and out of order.</t>

<t>Segments arrive in delivery order, but media usually needs to be processed in decode order.
The decoder SHOULD use a buffer to reassmble segments into decode order and it SHOULD skip segments after a configurable duration.
The amount of time the decoder is willing to wait for a segment (buffer duration) is what ultimately determines the end-to-end latency.</t>

<t>Segments MUST synchronize frames within and between tracks using presentation timestamps within the container.
Segments are NOT REQUIRED to be aligned and the decoder MUST be prepared to skip over any gaps.</t>

</section>
</section>
<section anchor="quic" title="QUIC">

<section anchor="establishment" title="Establishment">
<t>A connection is established using WebTransport <xref target="WebTransport"/>.</t>

<t>To summarize:
The client issues a HTTP CONNECT request with the intention of establishing a new WebTransport session.
The server returns an 200 OK response if the WebTransport session has been established, or an error status otherwise.</t>

<t>A WebTransport session exposes the basic QUIC service abstractions.
Specifically, either endpoint may create independent streams which are reliably delivered in order until canceled.</t>

<t>WebTransport can currently operate via HTTP/3 and HTTP/2, using QUIC or TCP under the hood respectively.
As mentioned in the motivation (<xref target="motivation"/>) section, TCP introduces head-of-line blocking and will result in a worse experience.
It is RECOMMENDED to use WebTransport over HTTP/3.</t>

<t>The application SHOULD use the CONNECT request for authentication.
For example, including a authentication token and some identifier in the path.</t>

</section>
<section anchor="streams" title="Streams">
<t>Warp endpoints communicate over unidirectional QUIC streams.
The application MAY use bidirectional QUIC streams for other purposes.</t>

<t>A stream consists of sequential messages.
See messages (<xref target="messages"/>) for the list of messages and their encoding.
These are similar to QUIC and HTTP/3 frames, but called messages to avoid the media terminology.</t>

<t>Each stream MUST start with a <spanx style="verb">HEADERS</spanx> message (<xref target="headers"/>) to indicates how the stream should be transmitted.</t>

<t>Messages SHOULD be sent over the same stream if ordering is desired.
For example, <spanx style="verb">PAUSE</spanx> and <spanx style="verb">PLAY</spanx> messages SHOULD be sent on the same stream to avoid a race.</t>

</section>
<section anchor="prioritization" title="Prioritization">
<t>Warp utilizes stream prioritization to deliver the most important content during congestion.</t>

<t>The encoder may assign a numeric delivery order to each stream (<xref target="delivery-order"/>)
This is a strict prioritization scheme, such that any available bandwidth is allocated to streams in ascending priority order.
The sender SHOULD prioritize streams based on the delivery order.
If two streams have the same delivery order, they SHOULD receive equal bandwidth (round-robin).</t>

<t>QUIC supports stream prioritization but does not standardize any mechanisms; see Section 2.3 in <xref target="QUIC"/>.
In order to support prioritization, a QUIC library MUST expose a API to set the priority of each stream.
This is relatively easy to implement; the next QUIC packet should contain a STREAM frame for the next pending stream in priority order.</t>

<t>The sender MUST respect flow control even if means delivering streams out of delivery order.
It is OPTIONAL to prioritize retransmissions.</t>

</section>
<section anchor="cancellation" title="Cancellation">
<t>A QUIC stream MAY be canceled at any point with an error code.
The producer does this via a <spanx style="verb">RESET_STREAM</spanx> frame while the consumer requests cancellation with a <spanx style="verb">STOP_SENDING</spanx> frame.</t>

<t>When using <spanx style="verb">order</spanx>, lower priority streams will be starved during congestion, perhaps indefinitely.
These streams will consume resources and flow control until they are canceled.
When nearing resource limits, an endpoint SHOULD cancel the lowest priority stream with error code 0.</t>

<t>The sender MAY cancel streams in response to congestion.
This can be useful when the sender does not support stream prioritization.</t>

</section>
<section anchor="relays-1" title="Relays">
<t>Warp encodes the delivery information for each stream via a <spanx style="verb">HEADERS</spanx> frame (<xref target="headers"/>).
This MUST be at the start of each stream so it is easy for a relay to parse.</t>

<t>A relay SHOULD prioritize streams (<xref target="prioritization"/>) based on the delivery order.
A relay MAY change the delivery order, in which case it SHOULD update the value on the wire for future hops.</t>

<t>A relay that reads from a stream and then writes to another stream will suffer from head-of-line blocking.
Packet loss will cause stream data to be buffered in the QUIC library, awaiting an in order flush, which will increase latency over additional hops.
To mitigate this, a relay SHOULD read and write QUIC streams out of order according to flow control limits.
See section 2.2 in <xref target="QUIC"/>.</t>

</section>
<section anchor="congestion-control" title="Congestion Control">
<t>As covered in the motivation section (<xref target="motivation"/>), the ability to prioritize or cancel streams is a form of congestion response.
It's equally important to detect congestion via congestion control, which is handled in the QUIC layer <xref target="QUIC-RECOVERY"/>.</t>

<t>Bufferbloat is caused by routers queueing packets for an indefinite amount of time rather than drop them.
This latency significantly reduces the ability for the application to prioritize or drop media in response to congestion.
Senders SHOULD use a congestion control algorithm that reduces this bufferbloat (ex. <xref target="BBR"/>).
It is NOT RECOMMENDED to use a loss-based algorithm (ex. <xref target="NewReno"/>) unless the network fully supports ECN.</t>

<t>Live media is application-limited, which means that the encoder determines the max bitrate rather than the network.
Most TCP congestion control algorithms will only increase the congestion window if it is full, limiting the upwards mobility when application-limited.
Senders SHOULD use a congestion control algorithm that is designed for application-limited flows (ex. GCC).
Senders MAY periodically pad the connection with QUIC PING frames to fill the congestion window.</t>

</section>
<section anchor="termination" title="Termination">
<t>The QUIC connection can be terminated at any point with an error code.</t>

<t>The media producer MAY terminate the QUIC connection with an error code of 0 to indicate the clean termination of the broadcast.
The application SHOULD use a non-zero error code to indicate a fatal error.</t>

<texttable>
      <ttcol align='right'>Code</ttcol>
      <ttcol align='left'>Reason</ttcol>
      <c>0x0</c>
      <c>Broadcast Terminated</c>
      <c>0x1</c>
      <c>GOAWAY (<xref target="goaway"/>)</c>
</texttable>

</section>
</section>
<section anchor="messages" title="Messages">
<t>Messages consist of a type identifier followed by contents, depending on the message type.</t>

<t>TODO document the encoding</t>

<texttable>
      <ttcol align='right'>ID</ttcol>
      <ttcol align='left'>Messages</ttcol>
      <c>0x0</c>
      <c>HEADERS (<xref target="headers"/>)</c>
      <c>0x1</c>
      <c>SEGMENT (<xref target="segment"/>)</c>
      <c>0x2</c>
      <c>APP (<xref target="app"/>)</c>
      <c>0x10</c>
      <c>GOAWAY (<xref target="goaway"/>)</c>
</texttable>

<section anchor="headers" title="HEADERS">
<t>The <spanx style="verb">HEADERS</spanx> message contains information required to deliver, cache, and forward a stream.
This message SHOULD be parsed and obeyed by any Warp relays.</t>

<t><list style="symbols">
  <t><spanx style="verb">id</spanx>.
An unique identifier for the stream.
This field is optional and MUST be unique if set.</t>
  <t><spanx style="verb">order</spanx>.
An integer indicating the delivery order (<xref target="delivery-order"/>).
This field is optional and the default value is 0.</t>
  <t><spanx style="verb">depends</spanx>.
An list of dependencies by stream identifier (<xref target="dependencies"/>).
This field is optional and the default value is an empty array.</t>
</list></t>

</section>
<section anchor="segment" title="SEGMENT">
<t>A <spanx style="verb">SEGMENT</spanx> message consists of a segment in a fragmented MP4 container.</t>

<t>Each segment MUST start with an initialization fragment, or MUST depend on a segment with an initialization fragment.
An initialization fragment consists of a File Type Box (ftyp) followed by a Movie Box (moov).
This Movie Box (moov) consists of Movie Header Boxes (mvhd), Track Header Boxes (tkhd), Track Boxes (trak), followed by a final Movie Extends Box (mvex).
These boxes MUST NOT contain any samples and MUST have a duration of zero.
Note that a Common Media Application Format Header <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Each segment MAY have a Segment Type Box (styp) followed by any number of media fragments.
Each media fragment consists of a Movie Fragment Box (moof) followed by a Media Data Box (mdat).
The Media Fragment Box (moof) MUST contain a Movie Fragment Header Box (mfhd) and Track Box (trak) with a Track ID (<spanx style="verb">track_ID</spanx>) matching a Track Box in the initialization fragment.
Note that a Common Media Application Format Segment <xref target="CMAF"></xref> meets all these requirements.</t>

<t>Media fragments can be packaged at any frequency, causing a trade-off between overhead and latency.
It is RECOMMENDED that a media fragment consists of a single frame to minimize latency.</t>

</section>
<section anchor="app" title="APP">
<t>The <spanx style="verb">APP</spanx> message contains arbitrary contents.
This is useful for metadata that would otherwise have to be shoved into the media bitstream.</t>

<t>Relays MUST NOT differentiate between streams containing <spanx style="verb">SEGMENT</spanx> and <spanx style="verb">APP</spanx> frames.
The same forwarding and caching behavior applies to both as specified in the<spanx style="verb">HEADERS</spanx> frame.</t>

</section>
<section anchor="goaway" title="GOAWAY">
<t>The <spanx style="verb">GOAWAY</spanx> message is sent by the server to force the client to reconnect.
This is useful for server maintenance or reassignments without severing the QUIC connection.
The server MAY be a producer or consumer.</t>

<t>The server:</t>

<t><list style="symbols">
  <t>MAY initiate a graceful shutdown by sending a GOAWAY message.</t>
  <t>MUST close the QUIC connection after a timeout with the GOAWAY error code (<xref target="termination"/>).</t>
  <t>MAY close the QUIC connection with a different error code if there is a fatal error before shutdown.</t>
  <t>SHOULD wait until the <spanx style="verb">GOAWAY</spanx> message and any pending streams have been fully acknowledged, plus an extra delay to ensure they have been processed.</t>
</list></t>

<t>The client:</t>

<t><list style="symbols">
  <t>MUST establish a new WebTransport session to the provided URL upon receipt of a <spanx style="verb">GOAWAY</spanx> message.</t>
  <t>SHOULD establish the connection in parallel which MUST use different QUIC connection.</t>
  <t>SHOULD remain connected for two servers for a short period, processing segments from both in parallel.</t>
</list></t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="resource-exhaustion" title="Resource Exhaustion">
<t>Live media requires significant bandwidth and resources.
Failure to set limits will quickly cause resource exhaustion.</t>

<t>Warp uses QUIC flow control to impose resource limits at the network layer.
Endpoints SHOULD set flow control limits based on the anticipated media bitrate.</t>

<t>The media producer prioritizes and transmits streams out of order.
Streams might be starved indefinitely during congestion.
The producer and consumer MUST cancel a stream, preferably the lowest priority, after reaching a resource limit.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">
<t>TODO</t>

</section>
<section anchor="appendix.encoding" title="Appendix A. Video Encoding">
<t>In order to transport media, we first need to know how media is encoded.
This section is an overview of media encoding.</t>

<section anchor="tracks" title="Tracks">
<t>A broadcast consists of one or more tracks.
Each track has a type (audio, video, caption, etc) and uses a corresponding codec.
There may be multiple tracks, including of the same type for a number of reasons.</t>

<t>For example:</t>

<t><list style="symbols">
  <t>A track for each codec.</t>
  <t>A track for each resolution and bitrate.</t>
  <t>A track for each language.</t>
  <t>A track for each camera feed.</t>
</list></t>

<t>Tracks can be muxed together into a single container or stream.
The goal of Warp is to independently deliver tracks, and even parts of a track, so this is not allowed.
Each Warp segment MUST contain a single track.</t>

</section>
<section anchor="appendix.init" title="Init">
<t>Media codecs have a wide array of configuration options.
For example, the resolution, the color space, the features enabled, etc.</t>

<t>Before playback can begin, the decoder needs to know the configuration.
This is done via a short payload at the very start of the media file.
The initialization payload MAY be cached and reused between segments with the same configuration.</t>

</section>
<section anchor="appendix.video" title="Video">
<t>Video is a sequence of pictures (frames) with a presentation timestamp (PTS).</t>

<t>An I-frame is a frame with no dependencies and is effectively an image file.
These frames are usually inserted at a frequent interval to support seeking or joining a live stream.
However they can also improve compression when used at scene boundaries.</t>

<t>A P-frame is a frame that references on one or more earlier frames.
These frames are delta-encoded, such that they only encode the changes (motion).
This result in a massive file size reduction for most content outside of few notorious cases (ex. confetti).</t>

<t>A common encoding structure is to only reference the previous frame, as it is simple and minimizes latency:</t>

<figure><artwork><![CDATA[
 I <- P <- P <- P   I <- P <- P <- P   I <- P ...
]]></artwork></figure>

<t>There is no such thing as an optimal encoding structure.
Encoders tuned for the best quality will produce a tangled spaghetti of references.
Encoders tuned for the lowest latency can avoid reference frames to allow more to be dropped.</t>

<section anchor="appendix.b-frame" title="B-Frames">
<t>The goal of video codecs is to maximize compression.
One of the improvements is to allow a frame to reference later frames.</t>

<t>A B-frame is a frame that can reference one or more frames in the future, and any number of frames in the past.
These frames are more difficult to encode/decode as they require buffering and reordering.</t>

<t>A common encoding structure is to use B-frames in a fixed pattern.
Such a fixed pattern is not optimal, but it's simpler for hardware encoding:</t>

<figure><artwork><![CDATA[
    B     B         B     B         B
   / \   / \       / \   / \       / \
  v   v v   v     v   v v   v     v   v
 I <-- P <-- P   I <-- P <-- P   I <-- P ...
]]></artwork></figure>

</section>
<section anchor="timestamps" title="Timestamps">
<t>Each frame is assigned a presentation timestamp (PTS), indicating when it should be shown relative to other frames.</t>

<t>The encoder outputs the bitstream in decode order, which means that each frame is output after its references.
This makes it easier for the decoder as all references are earlier in the bitstream and can be decoded immediately.</t>

<t>However, this causes problems with B-frames because they depend on a future frame, and some reordering has to occur.
In order to keep track of this, frames have a decode timestamp (DTS) in addition to a presentation timestamp (PTS).
A B-frame will have higher DTS value that its dependencies, while PTS and DTS will be the same for other frame types.</t>

<t>For the example above, this would look like:</t>

<figure><artwork><![CDATA[
     0 1 2 3 4 5 6 7 8 9 10
PTS: I B P B P I B P B P B
DTS: I   PB  PBI   PB  PB
]]></artwork></figure>

<t>B-frames add latency because of this reordering so they are usually not used for conversational latency.</t>

</section>
<section anchor="appendix.gop" title="Group of Pictures">
<t>A group of pictures (GoP) is an I-frame followed by any number of frames until the next I-frame.
All frames MUST reference, either directly or indirectly, only the most recent I-frame.</t>

<figure><artwork><![CDATA[
        GoP               GoP            GoP
+-----------------+-----------------+---------------
|     B     B     |     B     B     |     B
|    / \   / \    |    / \   / \    |    / \
|   v   v v   v   |   v   v v   v   |   v   v
|  I <-- P <-- P  |  I <-- P <-- P  |  I <-- P ...
+-----------------+-----------------+--------------
]]></artwork></figure>

<t>This is a useful abstraction because GoPs can always be decoded independently.</t>

</section>
<section anchor="appendix.svc" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy.
This layered coding means that dropping the top layer degrades the user experience in a configured way.
Examples include reducing the resolution, picture quality, and/or frame rate.</t>

<t>Here is an example SVC encoding with 3 resolutions:</t>

<figure><artwork><![CDATA[
      +-------------------------+------------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P ...
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+------------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P ...
      +-------------------------+------------------
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.audio" title="Audio">
<t>Audio is dramatically simpler than video as it is not typically delta encoded.
Audio samples are grouped together (group of samples) at a configured rate, also called a "frame".</t>

<t>The encoder spits out a continuous stream of samples (S):</t>

<figure><artwork><![CDATA[
S S S S S S S S S S S S S ...
]]></artwork></figure>

</section>
</section>
<section anchor="appendix.examples" title="Appendix B. Segment Examples">
<t>Warp offers a large degree of flexibility on how segments are fragmented and prioritized.
There is no best solution; it depends on the desired complexity and user experience.</t>

<t>This section provides a summary of some options available.</t>

<section anchor="video" title="Video">

<section anchor="group-of-pictures" title="Group of Pictures">
<t>A group of pictures (GoP) is consists of an I-frame and all frames that directly or indirectly reference it (<xref target="appendix.gop"/>).
The tail of a GoP can be dropped without causing decode errors, even if the encoding is otherwise unknown, making this the safest option.</t>

<t>It is RECOMMENDED that each segment consist of a single GoP.
For example:</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
]]></artwork></figure>

<t>Depending on the video encoding, this approach may introduce unnecessary ordering and dependencies.
A better option may be available below.</t>

</section>
<section anchor="scalable-video-coding" title="Scalable Video Coding">
<t>Some codecs support scalable video coding (SVC), in which the encoder produces multiple bitstreams in a hierarchy (<xref target="appendix.svc"/>).</t>

<t>When SVC is used, it is RECOMMENDED that each segment consist of a single layer and GoP.
For example:</t>

<figure><artwork><![CDATA[
               segment 3             segment 6
      +-------------------------+---------------
   4k |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 2             segment 5
      +-------------------------+---------------
1080p |  P <- P <- P <- P <- P  |  P <- P <- P
      |  |    |    |    |    |  |  |    |    |
      |  v    v    v    v    v  |  v    v    v
      +-------------------------+--------------

               segment 1             segment 4
      +-------------------------+---------------
 360p |  I <- P <- P <- P <- P  |  I <- P <- P
      +-------------------------+---------------
]]></artwork></figure>

</section>
<section anchor="frames" title="Frames">
<t>With full knowledge of the encoding, the encoder MAY can split a GoP into multiple segments based on the frame.
However, this is highly dependent on the encoding, and the additional complexity might not improve the user experience.</t>

<t>For example, we could split our example B-frame structure (<xref target="appendix.b-frame"/>) into 13 segments:</t>

<figure><artwork><![CDATA[
      2     4           7     9           12
+--------+--------+--------+--------+-----------+
|     B  |  B     |     B  |  B     |     B     |
|-----+--+--+-----+-----+--+--+-----+-----+-----+
|  I  |  P  |  P  |  I  |  P  |  P  |  I  |  P  |
+-----+-----+-----+-----+-----+-----+-----+-----+
   1     3     5     6     8     10    11    13
]]></artwork></figure>

<t>To reduce the number of segments, segments can be merged with their dependency.
QUIC streams will deliver each segment in order so this produces the same result as reordering within the application.</t>

<t>The same GoP structure can be represented using eight segments:</t>

<figure><artwork><![CDATA[
      2     3           5     6           8
+--------+--------+-----------------+------------
|     B  |  B     |     B  |  B     |     B     |
+--------+--------+--------+--------+-----------+
|  I     P     P  |  I     P     P  |  I     P
+-----------------+-----------------+------------
         1                 4              7
]]></artwork></figure>

<t>We can further reduce the number of segments by combining frames that don't depend on each other.
The only restriction is that frames can only reference frames earlier in the segment, or within a dependency segment.
For example, non-reference frames can have their own segment so they can be prioritized or dropped separate from reference frames.</t>

<t>The same GoP structure can also be represented using six segments, although we've removed the ability to drop individual B-frames:</t>

<figure><artwork><![CDATA[
   segment 2     segment 4   segment 6
+-------------+-------------+---------
|    B   B    |    B   B    |    B
+-------------+-------------+---------
|  I   P   P  |  I   P   P  |  I   P
+-------------+-------------+---------
   segment 1     segment 3   segment 5
]]></artwork></figure>

</section>
<section anchor="init" title="Init">
<t>Initialization data (<xref target="appendix.init"/>) is required to initialize the decoder.
Each segment MAY start with initialization data although this adds overhead.</t>

<t>Instead, it is RECOMMENDED to create a init segment.
Each media segment can then depend on the init segment to avoid the redundant overhead.
For example:</t>

<figure><artwork><![CDATA[
    segment 2       segment 3    segment 5
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
|              init             |  init
+-------------------------------+---------
             segment 1           segment 4
]]></artwork></figure>

</section>
</section>
<section anchor="audio" title="Audio">
<t>Audio (<xref target="appendix.audio"/>) is much simpler than video so there's fewer options.</t>

<t>The simplest configuration is to use a single segment for each audio track.
This may seem inefficient given the ease of dropping audio samples.
However, the audio bitrate is low and gaps cause quite a poor user experience, when compared to video.</t>

<figure><artwork><![CDATA[
         segment 1
+---------------------------
| S S S S S S S S S S S S S
+---------------------------
]]></artwork></figure>

<t>An improvement is to periodically split audio samples into separate segments.
This gives the consumer the ability to skip ahead during severe congestion or temporary connectivity loss.</t>

<figure><artwork><![CDATA[
    segment 1       segment 2    segment 3
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
]]></artwork></figure>

<t>This frequency of audio segments is configurable, at the cost of additional overhead.
It's NOT RECOMMENDED to create a segment for each audio frame because of this overhead.</t>

<t>Since video can only recover from severe congestion with an I-frame, so there's not much point recovering audio at a separate interval.
It is RECOMMENDED to create a new audio segment at each video I-frame.</t>

<figure><artwork><![CDATA[
    segment 1       segment 3    segment 5
+---------------+---------------+---------
| S  S  S  S  S | S  S  S  S  S | S  S  S
+---------------+---------------+---------
| I  P  B  P  B | I  P  B  P  B | I  P  B
+---------------+---------------+---------
    segment 2       segment 4    segment 6
]]></artwork></figure>

</section>
<section anchor="appendix.delivery-order" title="Delivery Order">
<t>The delivery order (<xref target="delivery-order"/> depends on the desired user experience during congestion:</t>

<t><list style="symbols">
  <t>if media should be skipped: delivery order = PTS</t>
  <t>if media should not be skipped: delivery order = -PTS</t>
  <t>if video should be skipped before audio: audio delivery order &lt; video delivery order</t>
</list></t>

<t>The delivery order may be changed if the content changes.
For example, switching from a live stream (skippable) to an advertisement (unskippable).</t>

</section>
</section>
<section numbered="false" anchor="contributors" title="Contributors">

<t><list style="symbols">
  <t>Alan Frindell</t>
  <t>Charles Krasic</t>
  <t>Cullen Jennings</t>
  <t>James Hurley</t>
  <t>Jordi Cenzano</t>
  <t>Mike English</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='QUIC' target='https://www.rfc-editor.org/info/rfc9000'>
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='M. Thomson' initials='M.' role='editor' surname='Thomson'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t></abstract>
</front>
<seriesInfo name='RFC' value='9000'/>
<seriesInfo name='DOI' value='10.17487/RFC9000'/>
</reference>



<reference anchor='QUIC-RECOVERY' target='https://www.rfc-editor.org/info/rfc9002'>
<front>
<title>QUIC Loss Detection and Congestion Control</title>
<author fullname='J. Iyengar' initials='J.' role='editor' surname='Iyengar'><organization/></author>
<author fullname='I. Swett' initials='I.' role='editor' surname='Swett'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document describes loss detection and congestion control mechanisms for QUIC.</t></abstract>
</front>
<seriesInfo name='RFC' value='9002'/>
<seriesInfo name='DOI' value='10.17487/RFC9002'/>
</reference>


<reference anchor='WebTransport'>
   <front>
      <title>WebTransport over HTTP/3</title>
      <author fullname='Alan Frindell' initials='A.' surname='Frindell'>
         <organization>Facebook</organization>
      </author>
      <author fullname='Eric Kinnear' initials='E.' surname='Kinnear'>
         <organization>Apple Inc.</organization>
      </author>
      <author fullname='Victor Vasiliev' initials='V.' surname='Vasiliev'>
         <organization>Google</organization>
      </author>
      <date day='6' month='July' year='2022'/>
      <abstract>
	 <t>   WebTransport [OVERVIEW] is a protocol framework that enables clients
   constrained by the Web security model to communicate with a remote
   server using a secure multiplexed transport.  This document describes
   a WebTransport protocol that is based on HTTP/3 [HTTP3] and provides
   support for unidirectional streams, bidirectional streams and
   datagrams, all multiplexed within the same HTTP/3 connection.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-webtrans-http3-03'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-webtrans-http3-03.txt' type='TXT'/>
</reference>


<reference anchor="ISOBMFF" >
  <front>
    <title>Information technology â Coding of audio-visual objects â Part 12: ISO Base Media File Format</title>
    <author >
      <organization></organization>
    </author>
    <date year="2015" month="December"/>
  </front>
</reference>




<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="CMAF" >
  <front>
    <title>Information technology -- Multimedia application format (MPEG-A) -- Part 19: Common media application format (CMAF) for segmented media</title>
    <author >
      <organization></organization>
    </author>
    <date year="2020" month="March"/>
  </front>
</reference>




<reference anchor='NewReno' target='https://www.rfc-editor.org/info/rfc6582'>
<front>
<title>The NewReno Modification to TCP's Fast Recovery Algorithm</title>
<author fullname='T. Henderson' initials='T.' surname='Henderson'><organization/></author>
<author fullname='S. Floyd' initials='S.' surname='Floyd'><organization/></author>
<author fullname='A. Gurtov' initials='A.' surname='Gurtov'><organization/></author>
<author fullname='Y. Nishida' initials='Y.' surname='Nishida'><organization/></author>
<date month='April' year='2012'/>
<abstract><t>RFC 5681 documents the following four intertwined TCP congestion control algorithms: slow start, congestion avoidance, fast retransmit, and fast recovery.  RFC 5681 explicitly allows certain modifications of these algorithms, including modifications that use the TCP Selective Acknowledgment (SACK) option (RFC 2883), and modifications that respond to &quot;partial acknowledgments&quot; (ACKs that cover new data, but not all the data outstanding when loss was detected) in the absence of SACK.  This document describes a specific algorithm for responding to partial acknowledgments, referred to as &quot;NewReno&quot;.  This response to partial acknowledgments was first proposed by Janey Hoe.  This document obsoletes RFC 3782.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6582'/>
<seriesInfo name='DOI' value='10.17487/RFC6582'/>
</reference>


<reference anchor='BBR'>
   <front>
      <title>BBR Congestion Control</title>
      <author fullname='Neal Cardwell' initials='N.' surname='Cardwell'>
         <organization>Google</organization>
      </author>
      <author fullname='Yuchung Cheng' initials='Y.' surname='Cheng'>
         <organization>Google</organization>
      </author>
      <author fullname='Soheil Hassas Yeganeh' initials='S. H.' surname='Yeganeh'>
         <organization>Google</organization>
      </author>
      <author fullname='Ian Swett' initials='I.' surname='Swett'>
         <organization>Google</organization>
      </author>
      <author fullname='Van Jacobson' initials='V.' surname='Jacobson'>
         <organization>Google</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This document specifies the BBR congestion control algorithm.  BBR
   (&quot;Bottleneck Bandwidth and Round-trip propagation time&quot;) uses recent
   measurements of a transport connection&#39;s delivery rate, round-trip
   time, and packet loss rate to build an explicit model of the network
   path.  BBR then uses this model to control both how fast it sends
   data and the maximum volume of data it allows in flight in the
   network at any time.  Relative to loss-based congestion control
   algorithms such as Reno [RFC5681] or CUBIC [RFC8312], BBR offers
   substantially higher throughput for bottlenecks with shallow buffers
   or random losses, and substantially lower queueing delays for
   bottlenecks with deep buffers (avoiding &quot;bufferbloat&quot;).  BBR can be
   implemented in any transport protocol that supports packet-delivery
   acknowledgment.  Thus far, open source implementations are available
   for TCP [RFC793] and QUIC [RFC9000].  This document specifies version
   2 of the BBR algorithm, also sometimes referred to as BBRv2 or bbr2.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-cardwell-iccrg-bbr-congestion-control-02'/>
   <format target='https://www.ietf.org/archive/id/draft-cardwell-iccrg-bbr-congestion-control-02.txt' type='TXT'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
vG/B/8ERXvwZxGccY7z3RJ/8Sr8Jt984WyX9lX7zqzbxZP/r/c1/9U2YZ1/J
JnZ8qT/EImB3E582jVp+5pDfhxBxKYcNSWnwdemQx308WC05q5drI4VbvcsI
lUWq2DXdhfMcIqGHyas8oOlYJ8Uht8dXvVeD7EmQIWIzcMZYogR6fi4zj5hp
HvVsyGaTa/8THgBvB+KXA+lbW/wcJGX2lG0uzH3/85ZyHEs+mvrctGf8OJrs
elZJnqCC59L4nr0QLlZ8e/T01hJP7cN1Tw8u7Wnu3zM2TVxpdoOdJPg2bQ6j
Vq20co36iGsUOO0dmwatNQPFQSo+PM1xQjY5NTwYjqJF4a57TJOHTZEkYR7M
EnYug4UhMnvQnoh8Vtp/3EQDdtAHLZdoabkSeIUB4Sx2bU7psrWuLEANYmme
MPYnoeJKQXY2fHa9KxGzJBlP3oWIfu1QiQ5pTatQ426eg2UESdeapOJRw7y0
6GkvmO6EvnvsiQgE//lp/OHZjtVw/2eUOEJmwgji3/d+/pRBmZVOdht7Q5o4
oKrZTgisK66hybbh1DUBOXQY82a0vNkjbZqhff4F6C6fEZ2d1PeJ3Wu+/N83
VxKyhcUkHQHhUUP7S/3BYqwy99PJR4wbwOoBQop+PNkMXv3qk3XPJ1oa/38p
6NF90Hk6ePXLT4fOp5kw/0Wg82Tw6he/gnY+yTb69PFVyZM0kJjt6AfY2CgJ
Mb4exIVeY0kVdVeSY436vkpRMZxL3G2hk6Ty1eNNQ0Q4xZRfrXxr6uhcfJjd
1dNGR84iFR9aacU9r3aVfpLi8y+wkl1Unf/OB3ZCdDWWVy6u/WFPNv3kmd9u
Il2EXb6IiOL3/Pub6MqTp0Gn/JI/8Hdw5d/vuPK7V0yoTf+d+/8k+r17xc1x
powYfj90ZTQwysO/ASZhGhG7X/Lvr/j31wKdff7NNz15pk59Fb8uIURvQu9P
T3su6Y13rCx8CjPubbXtveT2NmqFmGoZfzjSJbC9tvMRO02CZUnYK2oxFJ2L
cQVueAzMEwhN1+xf7uYb/1h5Kcr9hBbrrhiU8vP1Q3Q2LCt+BZ39Klo+44fP
3e+Hrnx6LChI61Q+4+eL9OPvhcD0rVru3ScPEpucw1nPJPGb2O7c4j/EtJmY
2IAW+1zTlNINQwtnopd8ykvf0lSmftMLzetSuHLf9cGKe2Hq9736BhzF2hkZ
c7rGFsQlSGY48nfRW1dqHL0IOnp5s39Dhb4IIx3/YaJnf3eQ8hvyQwN3ZwV8
l6sVye/f3OD2NVf3xqdJcUwGZ0WjFowuWh34JjVqvLo2sdn3u/vpKvUflAWO
PEf0Pn3CSGdK+YHue59+6Vimb5rERm4w3nxyDOU0o7O0UITrq2PdxzU2H/aS
/upcDqSPJS3ipruHDqJTKPnAVB65rb4SrPHl6XAmXdPDAbegcm26Mh44kH10
OMF7DHLktey9QTZ+Lu1UBBlQLjLtCiSredg5daZy4lgEoP+/dk7fp5KPdx7/
vJdrA+L23iGT54ds4mAROwNUwnIaNYupTKJzQmZrJKwHInIikfiFY0t+qa0v
5BIpw09IpUlU7RWy5N5XdOvyBXTy8lTfeD+X5uSNxYvUSos8PtfN67t5YaZm
kvLyMfbklb7pOwj1O3cKGzF7FDIQFXJfdclJEGMxJW8qWlPPjB1L4hnWr2sy
6N7lnTi2HgUPIpEo4d6I4MMPMhJx4CsUZyh0kxPT6iIkgVHt6O/eGBY1cKUB
rvhFDG3cnqYn27mnYsZHVrQsl08dJAetkSS16K2gx0i4xvsGA+CE/vQfG026
MPH/7/38ydEkOWvoTvVE74727T+bpJfn2BUI8vvccHvwnoIg434UAw0NvDy9
h0HERepnfCNxfZFD92v4KJgz8qIythB28eaOGGpYdByzOfw7lgb+TfKVHjaR
Bcn7xB1ZuWK9e/oP+t3hdEICRuMCTLLy3TztfSTzn5Hx/wCS+Ycojod03Bfx
h6987iV9N0GcPegd6B3qnj9w7Pe+kH8/e7lTss8F2bkrSI/KdkiekPV60J/7
n1CgMfAI6PDBxyb+OVVV/anc2R6muwMlv94wf9CH08ujISBpxFdqMxcucu9K
LLVks+cANMRpctBAOxRFNavmMa8TImRPWhSR5LiRFzhKZ9+uDHfwwYRj936y
qm5GPx+Ip2QX//RoSXa9ffRhNJqYw4IGel4jq14U9Pl4RZ4Myfo/1ejRigtd
UZBq+2dbwp1q6Mo/s1/yoqP7tviInkDm2JY/ZWVFn1/l19ackhbPm9XoPwAX
Z0Tq54sAAA==

-->

</rfc>

